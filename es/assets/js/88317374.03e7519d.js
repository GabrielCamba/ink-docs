"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[5914],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),c=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return i.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?i.createElement(f,o(o({ref:t},s),{},{components:n})):i.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},32649:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(87462),r=(n(67294),n(3905));const a={title:"primitive_topic",hide_title:!0,description:"primitive_topic lint documentation"},o="primitive_topic",l={unversionedId:"linter/rules/primitive_topic",id:"linter/rules/primitive_topic",title:"primitive_topic",description:"primitive_topic lint documentation",source:"@site/docs/linter/rules/primitive_topic.md",sourceDirName:"linter/rules",slug:"/linter/rules/primitive_topic",permalink:"/es/linter/rules/primitive_topic",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/linter/rules/primitive_topic.md",tags:[],version:"current",frontMatter:{title:"primitive_topic",hide_title:!0,description:"primitive_topic lint documentation"},sidebar:"reference",previous:{title:"no_main",permalink:"/es/linter/rules/no_main"},next:{title:"storage_never_freed",permalink:"/es/linter/rules/storage_never_freed"}},p={},c=[{value:"What it does",id:"what-it-does",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Example",id:"example",level:2}],s={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"primitive_topic"},"primitive_topic"),(0,r.kt)("h2",{id:"what-it-does"},"What it does"),(0,r.kt)("p",null,"Checks for ink! contracts that use the\n",(0,r.kt)("a",{parentName:"p",href:"https://use.ink/macros-attributes/topic"},(0,r.kt)("inlineCode",{parentName:"a"},"#[ink(topic)]"))," annotation with primitive number\ntypes. Topics are discrete events for which it makes sense to filter. Typical examples of\nfields that should be filtered are ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountId"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bool")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," variants."),(0,r.kt)("h2",{id:"why-is-this-bad"},"Why is this bad?"),(0,r.kt)("p",null,"It typically doesn't make sense to annotate types like ",(0,r.kt)("inlineCode",{parentName:"p"},"u32")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"i32")," as a topic, if those\nfields can take continuous values that could be anywhere between ",(0,r.kt)("inlineCode",{parentName:"p"},"::MIN")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"::MAX"),". An\nexample of a case where it doesn't make sense at all to have a topic on the storage field\nis something like ",(0,r.kt)("inlineCode",{parentName:"p"},"value: Balance")," in the examle below."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// Bad\n// It typically makes no sense to filter `Balance`, since its value may varies from `::MAX`\n// to `::MIN`.\n#[ink(event)]\npub struct Transaction {\n    #[ink(topic)]\n    src: Option<AccountId>,\n    #[ink(topic)]\n    dst: Option<AccountId>,\n    #[ink(topic)]\n    value: Balance,\n}\n")),(0,r.kt)("p",null,"Use instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// Good\n// Filtering transactions based on source and destination addresses.\n#[ink(event)]\npub struct Transaction {\n    #[ink(topic)]\n    src: Option<AccountId>,\n    #[ink(topic)]\n    dst: Option<AccountId>,\n    value: Balance,\n}\n")))}d.isMDXComponent=!0}}]);