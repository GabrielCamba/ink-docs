"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[6136],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),i=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=i(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=i(n),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||r;return n?o.createElement(m,l(l({ref:t},u),{},{components:n})):o.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:a,l[1]=c;for(var i=2;i<r;i++)l[i]=n[i];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},53056:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>i});var o=n(87462),a=(n(67294),n(3905));const r={title:"useWallet",description:"React Hook for connecting to a wallet extension, and accessing account information."},l="useWallet",c={unversionedId:"frontend/react/hooks/wallets/use-wallet",id:"frontend/react/hooks/wallets/use-wallet",title:"useWallet",description:"React Hook for connecting to a wallet extension, and accessing account information.",source:"@site/docs/frontend/react/hooks/wallets/use-wallet.md",sourceDirName:"frontend/react/hooks/wallets",slug:"/frontend/react/hooks/wallets/use-wallet",permalink:"/es/frontend/react/hooks/wallets/use-wallet",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/react/hooks/wallets/use-wallet.md",tags:[],version:"current",frontMatter:{title:"useWallet",description:"React Hook for connecting to a wallet extension, and accessing account information."},sidebar:"reference",previous:{title:"useTxPaymentInfo",permalink:"/es/frontend/react/hooks/contracts/use-tx-payment-info"},next:{title:"useAllWallets",permalink:"/es/frontend/react/hooks/wallets/use-all-wallets"}},s={},i=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Changing the Active Account",id:"changing-the-active-account",level:2},{value:"Return Type",id:"return-type",level:2}],u={toc:i},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"usewallet"},"useWallet"),(0,a.kt)("p",null,"This hook provides tools for connecting to a wallet, accessing account information, and disconnecting\nfrom a wallet. Account information will update in real time when changes are made in the wallet extension."),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useWallet, useAllWallets } from 'useink'\n\nexport const WalletConnect = () => {\n  const wallets = useAllWallets()\n  const { isConnected, connect, disconnect, setAccount } = useWallet()\n\n  if (isConnected) return <button onClick={disconnect}>Disconnect</button>\n\n  return (\n    <ul>\n      {wallets.map(w => (\n        <li key={w.title}>\n          {w.installed ? (\n            <button onClick={() => connect(w.extensionName)}>\n              <img src={w.logo.src} alt={w.logo.alt} />\n              Connect to {w.title}\n            </button>\n          ) : (\n            <a href={w.installUrl}>\n              <img src={w.logo.src} alt={w.logo.alt} />\n              Install {w.title}\n            </a>\n          )}\n        </li>\n      ))}\n    </ul>\n  )\n}\n")),(0,a.kt)("h2",{id:"changing-the-active-account"},"Changing the Active Account"),(0,a.kt)("p",null,"You can set the active ",(0,a.kt)("inlineCode",{parentName:"p"},"account")," using ",(0,a.kt)("inlineCode",{parentName:"p"},"setAccount"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"account")," is used in all hooks as the caller address."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useWallet } from 'useink'\n\nexport const Accounts = () => {\n  const { account, accounts, setAccount } = useWallet()\n\n  if (!account) return null\n\n  return (\n    <div>\n      <h1>You are connected as {account.name || account.address}</h1>\n\n      <ul>\n        {accounts.map(a => (\n          <li key={a.address}>\n            <button onClick={() => setAccount(a)} disabled={account === a}>\n              Set account to {a.name || a.address}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n")),(0,a.kt)("h2",{id:"return-type"},"Return Type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  account?: WalletAccount | undefined;\n  accounts: WalletAccount[] | undefined;\n  connect: (walletName: WalletName) => void;\n  disconnect: () => void;\n  walletError?: WalletError;\n  isConnected: boolean;\n  setAccount: (account: WalletAccount) => void;\n  getWallets: typeof getWallets;\n  getWalletBySource: typeof getWalletBySource;\n}\n")))}p.isMDXComponent=!0}}]);