"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[4812],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(n),h=i,m=f["".concat(c,".").concat(h)]||f[h]||p[h]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[f]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},99956:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const o={title:"Off-chain Tests",hide_title:!0,slug:"/basics/contract-testing/off-chain"},a=void 0,s={unversionedId:"testing/off-chain",id:"version-5.x/testing/off-chain",title:"Off-chain Tests",description:"For integration tests, the test is annotated with our #[ink::test]",source:"@site/versioned_docs/version-5.x/testing/off-chain.md",sourceDirName:"testing",slug:"/basics/contract-testing/off-chain",permalink:"/es/5.x/basics/contract-testing/off-chain",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-5.x/testing/off-chain.md",tags:[],version:"5.x",frontMatter:{title:"Off-chain Tests",hide_title:!0,slug:"/basics/contract-testing/off-chain"},sidebar:"reference",previous:{title:"Overview",permalink:"/es/5.x/basics/contract-testing/overview"},next:{title:"Drink",permalink:"/es/5.x/basics/contract-testing/drink"}},c={},l=[{value:"How do you find out if your test requires the off-chain environment?",id:"how-do-you-find-out-if-your-test-requires-the-off-chain-environment",level:2},{value:"Example",id:"example",level:2}],u={toc:l},f="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(f,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("img",{src:"/img/title/testing1.svg",className:"titlePic"}),(0,i.kt)("h1",{id:"off-chain-tests"},"Off-chain Tests"),(0,i.kt)("p",null,"For integration tests, the test is annotated with our ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::test]"),"\nattribute instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"#[test]"),". Our attribute denotes that\nthe test is then executed in a simulated, mocked blockchain environment.\nhere are functions available to influence how the test environment\nis configured (e.g. setting a specified balance of an account to\nsimulate how a contract would behave when interacting with it)."),(0,i.kt)("p",null,"If you annotate a test with the ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::test]")," attribute it\nwill be executed in a simulated environment, similar to as it\nwould be run on-chain.\nYou then have fine-grained control over how a contract is called;\nfor example you can influence the block advancement, the value transferred to it,\nby which account it is called, which storage it is run with, etc.."),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink-examples/blob/main/erc20/lib.rs"},(0,i.kt)("inlineCode",{parentName:"a"},"examples/erc20"))," contract on how to utilize those or ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/ink/4.0.0/ink/attr.test.html"},"the documentation")," for details."),(0,i.kt)("p",null,"At the moment there are some known limitations to our off-chain environment,\nand we are working on making it behave as close to the real chain environment\nas possible."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"One limitation of the off-chain testing framework is that it\ncurrently only supports a ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultEnvironment"),"."),(0,i.kt)("p",{parentName:"admonition"},"See ",(0,i.kt)("a",{parentName:"p",href:"/basics/chain-environment-types"},"here")," for an explanation of what an environment is.")),(0,i.kt)("h2",{id:"how-do-you-find-out-if-your-test-requires-the-off-chain-environment"},"How do you find out if your test requires the off-chain environment?"),(0,i.kt)("p",null,"Normally if the test recursively uses or invokes some contract methods that\ncall a method defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"self.env()")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Self::env()"),"."),(0,i.kt)("p",null,"An example is the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let caller: AccountId = self.env().caller();\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n    // Conventional unit test that works with assertions.\n    #[ink::test]\n    fn test1() {\n        // test code comes here as usual\n    }\n\n    // Conventional unit test that returns some Result.\n    // The test code can make use of operator-`?`.\n    #[ink::test]\n    fn test2() -> Result<(), ink::env::Error> {\n        // test code that returns a Rust Result type\n    }\n}\n")))}p.isMDXComponent=!0}}]);