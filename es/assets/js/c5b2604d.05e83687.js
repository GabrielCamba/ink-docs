"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[585],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:l,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},37277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(87462),l=(n(67294),n(3905));const r={sidebar_position:2,slug:"/getting-started/swanky/node"},o="Swanky Node",i={unversionedId:"third-party-tools/swanky/node",id:"version-5.x/third-party-tools/swanky/node",title:"Swanky Node",description:"Swanky Node is a Substrate based blockchain configured to enable pallet-contracts (a smart contract module), and other features that assist local development of Wasm smart contracts.",source:"@site/versioned_docs/version-5.x/third-party-tools/swanky/node.md",sourceDirName:"third-party-tools/swanky",slug:"/getting-started/swanky/node",permalink:"/es/5.x/getting-started/swanky/node",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-5.x/third-party-tools/swanky/node.md",tags:[],version:"5.x",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/getting-started/swanky/node"},sidebar:"reference",previous:{title:"Swanky CLI",permalink:"/es/5.x/getting-started/swanky/cli"},next:{title:"ink! Analyzer",permalink:"/es/5.x/getting-started/ink-analyzer"}},s={},c=[{value:"Features",id:"features",level:3},{value:"Compatible ink! version",id:"compatible-ink-version",level:3},{value:"Installation",id:"installation",level:3},{value:"Download Binary",id:"download-binary",level:4},{value:"Build Locally",id:"build-locally",level:4},{value:"Embedded Docs \ud83d\udcd6",id:"embedded-docs-",level:3},{value:"Usage",id:"usage",level:3},{value:"Development Accounts",id:"development-accounts",level:3},{value:"Show only Errors and Contract Debug Output",id:"show-only-errors-and-contract-debug-output",level:3},{value:"Connect with Polkadot.js Apps Portal",id:"connect-with-polkadotjs-apps-portal",level:3},{value:"Run in Docker",id:"run-in-docker",level:3},{value:"Consensus (Manual Seal &amp; Instant Seal)",id:"consensus-manual-seal--instant-seal",level:3},{value:"Manual Sealing via RPC call",id:"manual-sealing-via-rpc-call",level:4},{value:"Params",id:"params",level:4},{value:"Finalizing Blocks Manually",id:"finalizing-blocks-manually",level:4}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"swanky-node"},"Swanky Node"),(0,l.kt)("p",null,"Swanky Node is a Substrate based blockchain configured to enable ",(0,l.kt)("inlineCode",{parentName:"p"},"pallet-contracts")," (a smart contract module), and other features that assist local development of Wasm smart contracts."),(0,l.kt)("h3",{id:"features"},"Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/paritytech/substrate/tree/master/frame/contracts"},"pallet-contracts")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"grandpa")," & ",(0,l.kt)("inlineCode",{parentName:"li"},"aura")," consensus were removed. Instead, ",(0,l.kt)("inlineCode",{parentName:"li"},"instant-seal")," & ",(0,l.kt)("inlineCode",{parentName:"li"},"manual-seal")," are used.\nBlocks are authored & finalized (1) as soon as a transaction get in the pool (2) when ",(0,l.kt)("inlineCode",{parentName:"li"},"engine_createBlock")," ",(0,l.kt)("inlineCode",{parentName:"li"},"engine_finalizeBlock")," RPC called respectively."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pallet-dapps-staking")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pallet-assets")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pallet-assets")," chain extension"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pallet-dapps-staking")," chain extension")),(0,l.kt)("p",null,"Swanky Node is optimized for local development, while removing unnecessary components such as P2P. Additional features and pallets, such as to interact between (Contract <-> Runtime), will be added in the future."),(0,l.kt)("h3",{id:"compatible-ink-version"},"Compatible ink! version"),(0,l.kt)("p",null,"ink! ",(0,l.kt)("inlineCode",{parentName:"p"},"v4.0.0")," or lower is supported."),(0,l.kt)("h3",{id:"installation"},"Installation"),(0,l.kt)("h4",{id:"download-binary"},"Download Binary"),(0,l.kt)("p",null,"The easiest method of installation is by downloading and executing a precompiled binary from the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/AstarNetwork/swanky-node/releases"},"Release Page")),(0,l.kt)("h4",{id:"build-locally"},"Build Locally"),(0,l.kt)("p",null,"If you would like to build the source locally, you should first complete the ",(0,l.kt)("a",{parentName:"p",href:"https://docs.astar.network/docs/build/environment/ink_environment#rust-and-cargo"},"basic Rust setup instructions"),".\nOnce Rust is installed and configured, you will be able to build the node with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cargo build --release\n")),(0,l.kt)("h3",{id:"embedded-docs-"},"Embedded Docs \ud83d\udcd6"),(0,l.kt)("p",null,"Once the project has been built, the following command can be used to explore all parameters and\nsubcommands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./target/release/swanky-node -h\n")),(0,l.kt)("h3",{id:"usage"},"Usage"),(0,l.kt)("p",null,"This command will start the single-node development chain with a persistent state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./target/release/swanky-node\n")),(0,l.kt)("p",null,"If you would prefer to run the node in non-persistent mode, use tmp option."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"./target/release/swanky-node --tmp\n# or\n./target/release/swanky-node --dev\n")),(0,l.kt)("p",null,"Purge the development chain's state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"./target/release/swanky-node purge-chain\n")),(0,l.kt)("h3",{id:"development-accounts"},"Development Accounts"),(0,l.kt)("p",null,"The ",(0,l.kt)("strong",{parentName:"p"},"alice")," development account will be the authority and sudo account as declared in the\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/AstarNetwork/swanky-node/blob/main/node/src/chain_spec.rs#L44"},"genesis state"),".\nWhile at the same time, the following accounts will be pre-funded:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Alice"),(0,l.kt)("li",{parentName:"ul"},"Bob"),(0,l.kt)("li",{parentName:"ul"},"Charlie"),(0,l.kt)("li",{parentName:"ul"},"Dave"),(0,l.kt)("li",{parentName:"ul"},"Eve"),(0,l.kt)("li",{parentName:"ul"},"Ferdie"),(0,l.kt)("li",{parentName:"ul"},"Alice//stash"),(0,l.kt)("li",{parentName:"ul"},"Bob//stash"),(0,l.kt)("li",{parentName:"ul"},"Charlie//stash"),(0,l.kt)("li",{parentName:"ul"},"Dave//stash"),(0,l.kt)("li",{parentName:"ul"},"Eve//stash"),(0,l.kt)("li",{parentName:"ul"},"Ferdie//stash")),(0,l.kt)("h3",{id:"show-only-errors-and-contract-debug-output"},"Show only Errors and Contract Debug Output"),(0,l.kt)("p",null,"To print errors and contract debug output to the console log, supply ",(0,l.kt)("inlineCode",{parentName:"p"},"-lerror,runtime::contracts=debug")," when starting the node."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"./target/release/swanky-node -lerror,runtime::contracts=debug\n")),(0,l.kt)("p",null,"Important: Debug output is only printed for RPC calls or off-chain tests \u2012 not for transactions."),(0,l.kt)("p",null,"See the ink! ",(0,l.kt)("a",{parentName:"p",href:"https://use.ink/faq/#how-do-i-print-something-to-the-console-from-the-runtime"},"FAQ")," for more details: How do I print something to the console from the runtime?."),(0,l.kt)("h3",{id:"connect-with-polkadotjs-apps-portal"},"Connect with Polkadot.js Apps Portal"),(0,l.kt)("p",null,"Once the Swanky Node is running locally, you will be able to connect to it from the ",(0,l.kt)("strong",{parentName:"p"},"Polkadot-JS Apps")," front-end,\nin order to interact with your chain. ",(0,l.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/#/explorer?rpc=ws://localhost:9944"},"Click\nhere")," connecting the Apps to your\nlocal Swanky Node."),(0,l.kt)("h3",{id:"run-in-docker"},"Run in Docker"),(0,l.kt)("p",null,"First, install ",(0,l.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and\n",(0,l.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose"),"."),(0,l.kt)("p",null,"Then run the following command to start a single node development chain."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir .local # this is mounted by container\n./scripts/docker_run.sh\n")),(0,l.kt)("p",null,"This command will compile the code, and then start a local development network. You can\nalso replace the default command\n(",(0,l.kt)("inlineCode",{parentName:"p"},"cargo build --release && ./target/release/swanky-node --dev --ws-external"),")\nby appending your own. A few useful commands are shown below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Run Substrate node without re-compiling\n./scripts/docker_run.sh ./target/release/swanky-node --ws-external\n\n# Purge the local dev chain\n./scripts/docker_run.sh ./target/release/swanky-node purge-chain\n\n# Check whether the code is compilable\n./scripts/docker_run.sh cargo check\n")),(0,l.kt)("h3",{id:"consensus-manual-seal--instant-seal"},"Consensus (Manual Seal & Instant Seal)"),(0,l.kt)("p",null,"Unlike other blockchains, Swanky Node adopts block authoring and finality gadgets referred to as Manual Seal and Instant Seal, consensus mechanisms suitable for contract development and testing."),(0,l.kt)("p",null,"Manual seal - Blocks are authored whenever RPC is called.\nInstant seal - Blocks are authored as soon as transactions enter the pool, most often resulting in one transaction per block."),(0,l.kt)("p",null,"Swanky Node enables both Manual seal and Instant seal."),(0,l.kt)("h4",{id:"manual-sealing-via-rpc-call"},"Manual Sealing via RPC call"),(0,l.kt)("p",null,"We can tell the node to author a block by calling the ",(0,l.kt)("inlineCode",{parentName:"p"},"engine_createBlock")," RPC."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ curl http://localhost:9933 -H "Content-Type:application/json;charset=utf-8" -d   \'{\n     "jsonrpc":"2.0",\n      "id":1,\n      "method":"engine_createBlock",\n      "params": [true, false, null]\n    }\'\n')),(0,l.kt)("h4",{id:"params"},"Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Create Empty"),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"create_empty")," is a Boolean value indicating whether empty blocks may be created. Setting ",(0,l.kt)("inlineCode",{parentName:"p"},"create-empty")," to true does not mean that an empty block will necessarily be created. Rather, it means that the engine should go ahead creating a block even if no transactions are present. If transactions are present in the queue, they will be included regardless of the value of ",(0,l.kt)("inlineCode",{parentName:"p"},"create_empty"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Finalize"),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"finalize")," is a Boolean value indicating whether the block (and its ancestors, recursively) should be finalized after creation.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Parent Hash"),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"parent_hash")," is an optional hash of a block to use as a parent. To set the parent, use the format ",(0,l.kt)("inlineCode",{parentName:"p"},'"0x0e0626477621754200486f323e3858cd5f28fcbe52c69b2581aecb622e384764"'),". To omit the parent, use ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),". When the parent is omitted the block will be built on the current best block. Manually specifying the parent is useful for constructing fork scenarios, and demonstrating chain reorganizations."))),(0,l.kt)("h4",{id:"finalizing-blocks-manually"},"Finalizing Blocks Manually"),(0,l.kt)("p",null,"In addition to finalizing blocks at the time of creating them, they may also be finalized later by using the RPC call ",(0,l.kt)("inlineCode",{parentName:"p"},"engine_finalizeBlock"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ curl http://localhost:9933 -H "Content-Type:application/json;charset=utf-8" -d   \'{\n     "jsonrpc":"2.0",\n      "id":1,\n      "method":"engine_finalizeBlock",\n      "params": ["0x0e0626477621754200486f323e3858cd5f28fcbe52c69b2581aecb622e384764", null]\n    }\'\n')))}u.isMDXComponent=!0}}]);