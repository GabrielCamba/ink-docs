"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[3206],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),f=r,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},37814:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={title:"useMetadata",description:"A React hook for loading and validating contract metadata from a file."},i="useMetadata",c={unversionedId:"frontend/react/hooks/contracts/use-metadata",id:"frontend/react/hooks/contracts/use-metadata",title:"useMetadata",description:"A React hook for loading and validating contract metadata from a file.",source:"@site/docs/frontend/react/hooks/contracts/use-metadata.md",sourceDirName:"frontend/react/hooks/contracts",slug:"/frontend/react/hooks/contracts/use-metadata",permalink:"/es/frontend/react/hooks/contracts/use-metadata",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/react/hooks/contracts/use-metadata.md",tags:[],version:"current",frontMatter:{title:"useMetadata",description:"A React hook for loading and validating contract metadata from a file."},sidebar:"reference",previous:{title:"useTxEvents",permalink:"/es/frontend/react/hooks/contracts/use-tx-events"},next:{title:"useSalter",permalink:"/es/frontend/react/hooks/contracts/use-salter"}},l={},s=[{value:"Usage",id:"usage",level:2},{value:"Return Value",id:"return-value",level:2}],u={toc:s},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usemetadata"},"useMetadata"),(0,r.kt)("p",null,"A React hook for loading and validating contract metadata from a file."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/useink/blob/main/playground/src/components/pg-deploy/DeployPage.tsx"},"example in the playground dApp"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useMetadata } from 'useink'\n\nexport const DeployPage: React.FC = () => {\n  // When requireWasm is set to true you must upload a full <name>.contract file containing a valid Wasm field.\n  // -- The file and Wasm blob will be validated on calling `set(file)`\n  // When requireWasm is set to false you must upload a <name>.json metadata file.\n  // -- The file will be validated on calling `set(file)`\n  const M = useMetadata({ requireWasm: true });\n\n  if (M.abi) {\n    return (\n      <>\n        <p>{M.formattedFileName}</p>\n        <button onClick={M.clear}>Reset State</button>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <MyDropzoneComponent\n        onDrop={(f: File[]) => M.set(f?.[0])}\n        cta='Upload a contract file. e.g. \"flipper.contract\"'\n      />\n\n      {M.error && <p>{M.error}</p>}\n    </>\n  );\n};\n\n\n")),(0,r.kt)("h2",{id:"return-value"},"Return Value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  abi?: Abi;\n  source?: Record<string, unknown>;\n  name: string;\n  formattedFileName: string;\n  set: (file: File) => void;\n  clear: () => void;\n  error?: MetadataError;\n}\n\n// Errors are exposed as enums for your convenience. \n// If you are using i18n you can check for one of these types and translate accordingly.\nexport enum MetadataError {\n  InvalidFile = 'Invalid file.',\n  EmptyWasm = 'Wasm field not found.',\n  InvalidWasm = 'Invalid Wasm field.',\n}\n")))}p.isMDXComponent=!0}}]);