"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[7621],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(t),d=r,m=f["".concat(c,".").concat(d)]||f[d]||p[d]||o;return t?i.createElement(m,a(a({ref:n},u),{},{components:t})):i.createElement(m,a({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[f]="string"==typeof e?e:r,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},86314:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=t(87462),r=(t(67294),t(3905));const o={title:"toNotificationLevel",description:"An utility function to convert transaction status to notification severity level"},a="toNotificationLevel",s={unversionedId:"frontend/notifications/toNotificationLevel",id:"frontend/notifications/toNotificationLevel",title:"toNotificationLevel",description:"An utility function to convert transaction status to notification severity level",source:"@site/docs/frontend/notifications/toNotificationLevel.mdx",sourceDirName:"frontend/notifications",slug:"/frontend/notifications/toNotificationLevel",permalink:"/es/frontend/notifications/toNotificationLevel",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/notifications/toNotificationLevel.mdx",tags:[],version:"current",frontMatter:{title:"toNotificationLevel",description:"An utility function to convert transaction status to notification severity level"},sidebar:"reference",previous:{title:"useNotifications",permalink:"/es/frontend/notifications/useNotifications"},next:{title:"Getting Started",permalink:"/es/frontend/utils"}},c={},l=[{value:"Notification <code>type</code> Conversion List",id:"notification-type-conversion-list",level:2},{value:"Return Type",id:"return-type",level:2}],u={toc:l},f="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(f,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tonotificationlevel"},"toNotificationLevel"),(0,r.kt)("p",null,"An opinionated utility function to convert nofication ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," to a simplified severity\nlevel. There are four levels: ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"warning"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),". This function is\nuseful for mapping transaction status to colors in your UI."),(0,r.kt)("p",null,"Note that for transactions the ",(0,r.kt)("inlineCode",{parentName:"p"},"Finalized")," status will convert to ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),", but this does\nnot necessarily mean that the transaction was successful in the user's eyes. It means that\nthe transaction has been processed, gas has been removed from the caller's balance, and\nthe block has been finalized."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { MyCustomSnackbar } from './MyCustomSnackbar'\nimport { useNotifications } from 'useink/notifications'\n\nexport const MyNotifications = ({ children }) => {\n  const { notifications } = useNotifications()\n\n  return (\n    <ul>\n      {notifications.map((n) => (\n        <li key={n.id}>\n          <MyCustomSnackbar\n            message={n.message}\n            type={\n              // e.g. `info` might have a blue background, and `error` a red one.\n              toNotificationLevel(n.type)\n            } \n          /> \n        </li>\n      ))}\n    </ul>\n  )\n}\n")),(0,r.kt)("h2",{id:"notification-type-conversion-list"},"Notification ",(0,r.kt)("inlineCode",{parentName:"h2"},"type")," Conversion List"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"case 'None':\n  return 'info';\n\ncase 'DryRun':\n  return 'info';\n\ncase 'PendingSignature':\n  return 'info';\n\ncase 'Future':\n  return 'info';\n\ncase 'Ready':\n  return 'info';\n\ncase 'Broadcast':\n  return 'info';\n\n// We optomistically assume that `InBlock` means that the transaction is `success`. \n// This will almost always end up reaching `Finalized` status.\ncase 'InBlock':\n  return 'success';\n\ncase 'Retracted':\n  return 'warning';\n\ncase 'FinalityTimeout':\n  return 'error';\n\ncase 'Finalized':\n  return 'success';\n\ncase 'Usurped':\n  return 'error';\n\ncase 'Dropped':\n  return 'error';\n\ncase 'Invalid':\n  return 'warning';\n\ncase 'Errored':\n  return 'error';\n\ncase 'WalletConnected':\n  return 'info';\n\ncase 'WalletDisconnected':\n  return 'info';\n\ndefault:\n  return 'info';\n")),(0,r.kt)("h2",{id:"return-type"},"Return Type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type NotificationLevel = 'success' | 'error' | 'warning' | 'info';\n")))}p.isMDXComponent=!0}}]);