"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[5267],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),g=a,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},68223:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"Crear un proyecto ink!",slug:"/getting-started/creating-an-ink-project",hide_title:!0},i=void 0,c={unversionedId:"getting-started/creating",id:"version-5.x/getting-started/creating",title:"Crear un proyecto ink!",description:"ink! es un Lenguaje espec\xedfico de dominio incorporado (EDSL) que puedes utilizar para escribir smart contracts basados en WebAssembly con el lenguage de programaci\xf3n Rust.",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-5.x/getting-started/creating.md",sourceDirName:"getting-started",slug:"/getting-started/creating-an-ink-project",permalink:"/es/5.x/getting-started/creating-an-ink-project",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-5.x/getting-started/creating.md",tags:[],version:"5.x",frontMatter:{title:"Crear un proyecto ink!",slug:"/getting-started/creating-an-ink-project",hide_title:!0},sidebar:"reference",previous:{title:"Configuraci\xf3n",permalink:"/es/5.x/getting-started/setup"},next:{title:"Compilar tu Contrato",permalink:"/es/5.x/getting-started/building-your-contract"}},s={},l=[{value:"C\xf3digo fuente del Contrato",id:"c\xf3digo-fuente-del-contrato",level:2},{value:"Prueba tu contracto",id:"prueba-tu-contracto",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("img",{src:"/img/title/heart.svg",className:"titlePic"}),(0,a.kt)("h1",{id:"crear-un-proyecto-ink"},"Crear un proyecto ink!"),(0,a.kt)("p",null,"ink! es un ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.haskell.org/Embedded_domain_specific_language"},"Lenguaje espec\xedfico de dominio incorporado")," (EDSL) que puedes utilizar para escribir smart contracts basados en WebAssembly con el lenguage de programaci\xf3n Rust."),(0,a.kt)("p",null,'ink! es solo est\xe1ndar Rust con un "formato de contrato" bien definido con attribute macros ',(0,a.kt)("inlineCode",{parentName:"p"},"#[ink(\u2026)]")," especializadas. Estos attribute macros le especifican a ink! que representan las diferentes partes que un smart contract en Rust representan, y finalmente permite a ink! hacer toda la magia necesaria para crear Wasm bytecode compatible con Substrate!"),(0,a.kt)("p",null,"Utiliza ink! CLI para generar un smart contract inicial con c\xf3digo de ejemplo."),(0,a.kt)("p",null,"Asegurate que estas en tu directorio de trabajo y ejecuta:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo contract new flipper\n")),(0,a.kt)("p",null,"Este comando crea una nueva carpeta en el proyecto llamada ",(0,a.kt)("inlineCode",{parentName:"p"},"flipper")," con este contenido:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"flipper\n  \u2514\u2500 lib.rs                <-- C\xf3digo fuente del Contrato\n  \u2514\u2500 Cargo.toml            <-- Dependencies Rust y Configuraci\xf3n ink! \n  \u2514\u2500 .gitignore\n")),(0,a.kt)("h2",{id:"c\xf3digo-fuente-del-contrato"},"C\xf3digo fuente del Contrato"),(0,a.kt)("p",null,'El CLI de ink generara automaticament el c\xf3digo fuente para el contrato "Flipper", que es el smart contract m\xe1s simple que puedes construir. Puede echar un vistazo a lo que vendr\xe1 mirando el c\xf3digo fuente aqu\xed:'),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/v3.0.0-rc8/examples/flipper/lib.rs"},"Flipper C\xf3digo fuente de ejemplo")),(0,a.kt)("p",null,"El contrato Flipper no es m\xe1s que un ",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," que cambia de ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," a ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," mediante la funci\xf3n ",(0,a.kt)("inlineCode",{parentName:"p"},"flip()")," . "),(0,a.kt)("h2",{id:"prueba-tu-contracto"},"Prueba tu contracto"),(0,a.kt)("p",null,"Al final del c\xf3digo fuente ver\xe1s un simple test case que verifica la funcionalidad del contrat. Podemos probar r\xe1pidamente que este c\xf3digo esta funcionando como se espera utilizando el ",(0,a.kt)("strong",{parentName:"p"},"off-chain test environment")," que ink! proporciona."),(0,a.kt)("p",null,"En la carpeta de tu proyecto ejecuta:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo test\n")),(0,a.kt)("p",null,"Ver\xe1s la ejecuci\xf3n satisfactoria del test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ cargo test\nrunning 2 tests\ntest flipper::tests::it_works ... ok\ntest flipper::tests::default_works ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")),(0,a.kt)("p",null,"Ahora que estamos seguros de que todo funciona, podemos compilar este contrato en Wasm en el siguiente paso."))}d.isMDXComponent=!0}}]);