"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[5859],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return n?i.createElement(f,r(r({ref:t},p),{},{components:n})):i.createElement(f,r({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,r[1]=o;for(var c=2;c<s;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},61038:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var i=n(87462),a=(n(67294),n(3905));const s={title:"tx Helpers",hide_title:!0,description:"Helper functions for checking the state of a transaction."},r="tx Helpers",o={unversionedId:"frontend/utils/tx-utils",id:"frontend/utils/tx-utils",title:"tx Helpers",description:"Helper functions for checking the state of a transaction.",source:"@site/docs/frontend/utils/tx-utils.md",sourceDirName:"frontend/utils",slug:"/frontend/utils/tx-utils",permalink:"/es/frontend/utils/tx-utils",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/utils/tx-utils.md",tags:[],version:"current",frontMatter:{title:"tx Helpers",hide_title:!0,description:"Helper functions for checking the state of a transaction."},sidebar:"reference",previous:{title:"\u26cf\ufe0f Pick Helpers",permalink:"/es/frontend/utils/pick"},next:{title:"Types",permalink:"/es/frontend/utils/types"}},l={},c=[{value:"shouldDisable",id:"shoulddisable",level:2},{value:"shouldDisableStrict",id:"shoulddisablestrict",level:2},{value:"hasAny",id:"hasany",level:2},{value:"isPendingSignature",id:"ispendingsignature",level:2},{value:"isNone",id:"isnone",level:2},{value:"isDryRun",id:"isdryrun",level:2},{value:"isErrored",id:"iserrored",level:2},{value:"isFuture",id:"isfuture",level:2},{value:"isReady",id:"isready",level:2},{value:"isBroadcast",id:"isbroadcast",level:2},{value:"isInBlock",id:"isinblock",level:2},{value:"isInvalid",id:"isinvalid",level:2},{value:"isUsurped",id:"isusurped",level:2},{value:"isDropped",id:"isdropped",level:2},{value:"isFinalized",id:"isfinalized",level:2},{value:"isFinalityTimeout",id:"isfinalitytimeout",level:2},{value:"isRetracted",id:"isretracted",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tx-helpers"},"tx Helpers"),(0,a.kt)("p",null,"There are a number of helper functions to check the status of a transaction. See\n",(0,a.kt)("a",{parentName:"p",href:"/frontend/react/hooks/contracts/use-tx#transaction-state"},"useTx")," for a full list of\nTransaction state values and descriptions."),(0,a.kt)("h2",{id:"shoulddisable"},"shouldDisable"),(0,a.kt)("p",null,"This function that returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if a transaction state is ",(0,a.kt)("inlineCode",{parentName:"p"},"DryRun"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"PendingSignature"),",\nor ",(0,a.kt)("inlineCode",{parentName:"p"},"Broadcast"),". It is good practice to disable a button that triggers a transaction unless\nit has fully resolved. In a successful transaction, ",(0,a.kt)("inlineCode",{parentName:"p"},"Broadcast")," state comes immediately\nbefore ",(0,a.kt)("inlineCode",{parentName:"p"},"InBlock"),", which is when contracts emit events and the transaction is most likely\nto succeed. See ",(0,a.kt)("inlineCode",{parentName:"p"},"shouldDisableStrict")," if you want to disable a button until it is\n",(0,a.kt)("inlineCode",{parentName:"p"},"Finalized"),", which may be more appropriate for high stake dApps."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { shouldDisable } from 'useink';\n\nexport const Flipper = (contract) => {\n    const flipTx = useTx(contract, 'flip');\n\n    return (\n        <button\n            onClick={flipTx.signAndSend}\n            disabled={shouldDisable(flipTx)}\n        >\n            {shouldDisable(flipTx) ? 'Flipping' : 'Flip!'}\n        </button>\n    )\n}\n")),(0,a.kt)("h2",{id:"shoulddisablestrict"},"shouldDisableStrict"),(0,a.kt)("p",null,"This function that returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if a transaction state is ",(0,a.kt)("inlineCode",{parentName:"p"},"DryRun"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"PendingSignature"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"Broadcast"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"InBlock"),". It is good practice to disable a button that triggers a\ntransaction unless it has fully resolved."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { shouldDisableStrict } from 'useink';\n\n//... React code omitted\n<button\n    onClick={flipTx.signAndSend}\n    disabled={shouldDisableStrict(flipTx)}\n>\n    {shouldDisableStrict(flipTx) ? 'Flipping' : 'Flip!'}\n</button>\n")),(0,a.kt)("h2",{id:"hasany"},"hasAny"),(0,a.kt)("p",null,"Returns a boolean if the transaction status has any of the arguments you pass in. Arguments must be of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Status"),";"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { hasAny } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(hasAny(['Broadcast', 'Finalized']));\n")),(0,a.kt)("h2",{id:"ispendingsignature"},"isPendingSignature"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"PendingSignature"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"PendingSignature")," is\nset when you call ",(0,a.kt)("inlineCode",{parentName:"p"},"signAndSend()")," on a transaction, which opens up a browser wallet\nextension modal for a user to sign. Once the transaction is signed the state will change\nto ",(0,a.kt)("inlineCode",{parentName:"p"},"Broadcast"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { isPendingSignature } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\nflipTx.signAndSend();\n\nconsole.log(isPendingSignature(flipTx));\n")),(0,a.kt)("h2",{id:"isnone"},"isNone"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isNone } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isNone(flipTx));\n")),(0,a.kt)("h2",{id:"isdryrun"},"isDryRun"),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"DryRun"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"DryRun")," occurs immediately before a\ntransaction is sent to verify if it will succeed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { isDryRun } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isDryRun(flipTx));\n")),(0,a.kt)("h2",{id:"iserrored"},"isErrored"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"Errored"),", which means that there was an\nerror in JavaScript somewhere."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isErrored } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isErrored(flipTx));\n")),(0,a.kt)("h2",{id:"isfuture"},"isFuture"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"Future"),", which means that the transaction\nis moving in to the transaction pool."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isFuture } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isFuture(flipTx));\n")),(0,a.kt)("h2",{id:"isready"},"isReady"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"Ready"),", which means that the transaction\nis ready to be entered in to the transaction pool."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isReady } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isFuture(flipTx));\n")),(0,a.kt)("h2",{id:"isbroadcast"},"isBroadcast"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"Broadcast"),". This is the point when\nevents are emitted."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isBroadcast } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isBroadcast(flipTx));\n")),(0,a.kt)("h2",{id:"isinblock"},"isInBlock"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"InBlock"),". At this point it is very likely\nthat the transaction will succeed. Most dApps can optimistically assume that the\ntransaction is a success, but you may want to wait until ",(0,a.kt)("inlineCode",{parentName:"p"},"Finalized")," stutus if you are\nbuilding a high stakes dApp with monetary value so you can offer 100% guarantee that a\ntransaction did succeed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isInBlock } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isInBlock(flipTx));\n")),(0,a.kt)("h2",{id:"isinvalid"},"isInvalid"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"Invalid"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isInvalid } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isInvalid(flipTx));\n")),(0,a.kt)("h2",{id:"isusurped"},"isUsurped"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"Usurped"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isUsurped } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isUsurped(flipTx));\n")),(0,a.kt)("h2",{id:"isdropped"},"isDropped"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"Usurped"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isDropped } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isDropped(flipTx));\n")),(0,a.kt)("h2",{id:"isfinalized"},"isFinalized"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"Finalized"),". This status guarantees that a\ntransaction completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isFinalized } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isFinalized(flipTx));\n")),(0,a.kt)("h2",{id:"isfinalitytimeout"},"isFinalityTimeout"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"FinalityTimeout"),". "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isFinalityTimeout } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isFinalityTimeout(flipTx));\n")),(0,a.kt)("h2",{id:"isretracted"},"isRetracted"),(0,a.kt)("p",null,"Returns a boolean if the transaction status is ",(0,a.kt)("inlineCode",{parentName:"p"},"Retracted"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { isRetracted } from 'useink';\n\n//... React code omitted\nconst flipTx = useTx(contract, 'flip');\n\nconsole.log(isRetracted(flipTx));\n")))}d.isMDXComponent=!0}}]);