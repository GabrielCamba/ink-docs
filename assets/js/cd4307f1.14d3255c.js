"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[6363],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(n),d=i,m=u["".concat(c,".").concat(d)]||u[d]||f[d]||s;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:i,o[1]=a;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},22870:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const s={title:"Overview",hide_title:!0,slug:"/basics/contract-testing/overview"},o=void 0,a={unversionedId:"testing/overview",id:"version-5.x/testing/overview",title:"Overview",description:"ink! supports three different stages of testing: unit, integration",source:"@site/versioned_docs/version-5.x/testing/overview.md",sourceDirName:"testing",slug:"/basics/contract-testing/overview",permalink:"/5.x/basics/contract-testing/overview",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-5.x/testing/overview.md",tags:[],version:"5.x",frontMatter:{title:"Overview",hide_title:!0,slug:"/basics/contract-testing/overview"},sidebar:"reference",previous:{title:"Sirato",permalink:"/5.x/basics/verification/sirato"},next:{title:"Off-chain Tests",permalink:"/5.x/basics/contract-testing/off-chain"}},c={},l=[{value:"Unit Tests",id:"unit-tests",level:2}],p={toc:l},u="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("img",{src:"/img/title/testing1.svg",className:"titlePic"}),(0,i.kt)("h1",{id:"overview"},"Overview"),(0,i.kt)("p",null,"ink! supports three different stages of testing: unit, integration\nand end-to-end tests. On this page we'll explain what the purpose\nof each stage is about and how to use it."),(0,i.kt)("img",{src:"/img/testing.png"}),(0,i.kt)("p",null,"Generally you can think of those three types of testing as a pyramid\nwith the top being the most elaborate test. The End-to-End (E2E)\ntests at the top will test the lower layers of the pyramid as part\nof them."),(0,i.kt)("h2",{id:"unit-tests"},"Unit Tests"),(0,i.kt)("p",null,"Testing contracts off-chain is done by ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo test")," and users can simply use the standard Rust\nroutines of creating unit test modules within the ink! project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn my_test() { ... }\n}\n")),(0,i.kt)("p",null,"Test instances of contracts can be created with something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let contract = MyContract::my_constructor(a, b);\n")),(0,i.kt)("p",null,"Messages can simply be called on the returned instance as if ",(0,i.kt)("inlineCode",{parentName:"p"},"MyContract::my_constructor")," returns a\n",(0,i.kt)("inlineCode",{parentName:"p"},"Self")," instance."),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink-examples/blob/main/flipper/lib.rs"},"flipper example"),"."))}f.isMDXComponent=!0}}]);