"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[7628],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(n),f=i,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||l;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=f;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:i,a[1]=o;for(var s=2;s<l;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},53147:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const l={title:"non_fallible_api",hide_title:!0,description:"non_fallible_api lint documentation"},a="non_fallible_api",o={unversionedId:"linter/rules/non_fallible_api",id:"linter/rules/non_fallible_api",title:"non_fallible_api",description:"non_fallible_api lint documentation",source:"@site/docs/linter/rules/non_fallible_api.md",sourceDirName:"linter/rules",slug:"/linter/rules/non_fallible_api",permalink:"/linter/rules/non_fallible_api",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/linter/rules/non_fallible_api.md",tags:[],version:"current",frontMatter:{title:"non_fallible_api",hide_title:!0,description:"non_fallible_api lint documentation"},sidebar:"reference",previous:{title:"strict_balance_equality",permalink:"/linter/rules/strict_balance_equality"},next:{title:"Overview",permalink:"/frontend/overview"}},p={},s=[{value:"What it does",id:"what-it-does",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Example",id:"example",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"non_fallible_api"},"non_fallible_api"),(0,i.kt)("h2",{id:"what-it-does"},"What it does"),(0,i.kt)("p",null,"The lint detects potentially unsafe uses of methods for which there are safer alternatives."),(0,i.kt)("h2",{id:"why-is-this-bad"},"Why is this bad?"),(0,i.kt)("p",null,"In some standard collections in ink!, there are two types of implementations: non-fallible\n(e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"get"),") and fallible (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"try_get"),"). Fallible alternatives are considered safer,\nas they perform additional checks for incorrect input parameters and return ",(0,i.kt)("inlineCode",{parentName:"p"},"Result::Err"),"\nwhen they are used improperly. On the other hand, non-fallible methods do not provide these\nchecks and will panic on incorrect input, placing the responsibility on the user to\nimplement these checks."),(0,i.kt)("p",null,"For more context, see: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/pull/1910"},"ink#1910"),"."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Consider the contract that has the following ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping")," field:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\npub struct Example { map: Mapping<String, AccountId> }\n")),(0,i.kt)("p",null,"The following usage of the non-fallible API is unsafe:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// Bad: can panic if `input_string` doesn't fit into the static buffer\nself.map.insert(input_string, &self.sender);\n")),(0,i.kt)("p",null,"It could be replaced with the fallible version of ",(0,i.kt)("inlineCode",{parentName:"p"},"Mapping::insert"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// Good: returns Result::Err on incorrect input\nself.map.try_insert(input_string, &self.sender);\n")),(0,i.kt)("p",null,"Otherwise, the user could explicitly check the encoded size of the argument in their code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// Good: explicitly checked encoded size of the input\nif String::encoded_size(&input_string) < ink_env::BUFFER_SIZE {\n  self.map.insert(input_string, &self.sender);\n}\n")))}d.isMDXComponent=!0}}]);