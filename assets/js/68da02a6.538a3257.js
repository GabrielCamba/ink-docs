"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[9823],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,g=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},89083:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={title:"Contract Debugging",slug:"/basics/contract-debugging",hide_title:!0},i=void 0,l={unversionedId:"basics/debugging",id:"version-5.x/basics/debugging",title:"Contract Debugging",description:"There are three ways to debug your ink! contract currently:",source:"@site/versioned_docs/version-5.x/basics/debugging.md",sourceDirName:"basics",slug:"/basics/contract-debugging",permalink:"/5.x/basics/contract-debugging",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-5.x/basics/debugging.md",tags:[],version:"5.x",frontMatter:{title:"Contract Debugging",slug:"/basics/contract-debugging",hide_title:!0},sidebar:"reference",previous:{title:"Contract Testing",permalink:"/5.x/basics/contract-testing"},next:{title:"Contract Verification",permalink:"/5.x/basics/verification/contract-verification"}},c={},s=[{value:"How do I print to the terminal console from ink!?",id:"how-do-i-print-to-the-terminal-console-from-ink",level:3},{value:"Example",id:"example",level:2}],p={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("img",{src:"/img/title/magnifying-glass.svg",className:"titlePic"}),(0,a.kt)("h1",{id:"contract-debugging"},"Contract Debugging"),(0,a.kt)("p",null,"There are three ways to debug your ink! contract currently:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can write tests using one of the mechanisms described on the\n",(0,a.kt)("a",{parentName:"li",href:"/basics/contract-testing"},"Contract Testing")," page."),(0,a.kt)("li",{parentName:"ul"},"You can interact with your contract via a UI or command-line. This is\ndescribed on the ",(0,a.kt)("a",{parentName:"li",href:"/getting-started/calling-your-contract"},"Call Your Contract")," page."),(0,a.kt)("li",{parentName:"ul"},"You can print debug statements in your contract. Those will appear\non the Substrate node's ",(0,a.kt)("inlineCode",{parentName:"li"},"stdout"),". This is described on this page.")),(0,a.kt)("h3",{id:"how-do-i-print-to-the-terminal-console-from-ink"},"How do I print to the terminal console from ink!?"),(0,a.kt)("p",null,"You can use those two macros:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.rs/ink_env/4.0.0/ink_env/macro.debug_println.html"},(0,a.kt)("inlineCode",{parentName:"a"},"ink::env::debug_println!"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.rs/ink_env/4.0.0/ink_env/macro.debug_print.html"},(0,a.kt)("inlineCode",{parentName:"a"},"ink::env::debug_print!")))),(0,a.kt)("p",null,"There are things you could do to enable debug messages on the client console:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Enable the feature ",(0,a.kt)("inlineCode",{parentName:"strong"},"ink-debug")," for the ",(0,a.kt)("inlineCode",{parentName:"strong"},"ink_env")," crate."),(0,a.kt)("br",null),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"cargo-contract")," does this automatically for you (for versions ",(0,a.kt)("inlineCode",{parentName:"p"},">= 0.13.0"),"), except if\nyou compile a contract in ",(0,a.kt)("inlineCode",{parentName:"p"},"--release")," mode.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Set the log level of your node to ",(0,a.kt)("inlineCode",{parentName:"strong"},"runtime::contracts=debug"),"."),(0,a.kt)("br",null),"\nFor example, to have only errors and debug output show up for the ",(0,a.kt)("inlineCode",{parentName:"p"},"substrate-contracts-node"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"substrate-contracts-node -lerror,runtime::contracts=debug\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Set the log level of your node to ",(0,a.kt)("inlineCode",{parentName:"strong"},"runtime::contracts::strace")," to trace host function calls."),(0,a.kt)("br",null),"\nThese function calls logs will also be displayed in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Debug message")," panel of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/contracts-ui"},"Contracts UI"),".\nFor example, to view these traces in addition to the logs described above:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"substrate-contracts-node -lerror,runtime::contracts=debug,runtime::contracts::strace=trace\n")))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"The following code depicts how to print debug statements\nfrom a message or constructor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[ink(constructor)]\nfn new() -> Self {\n    ink::env::debug_println!("created new instance at {}", Self::env().block_number());\n    Self { }\n}\n\n#[ink(message)]\nfn print(&self) {\n   let caller = self.env().caller();\n   let message = ink_prelude::format!("got a call from {:?}", caller);\n   ink::env::debug_println!(&message);\n}\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Debug output is not printed for transactions!"),(0,a.kt)("p",{parentName:"admonition"},"It is only printed for RPC calls or off-chain tests.")))}m.isMDXComponent=!0}}]);