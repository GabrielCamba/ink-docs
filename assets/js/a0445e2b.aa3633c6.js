"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[8868],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),f=a,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},46041:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={title:"storage_never_freed",hide_title:!0,description:"storage_never_freed lint documentation"},i="storage_never_freed",s={unversionedId:"linter/rules/storage_never_freed",id:"linter/rules/storage_never_freed",title:"storage_never_freed",description:"storage_never_freed lint documentation",source:"@site/docs/linter/rules/storage_never_freed.md",sourceDirName:"linter/rules",slug:"/linter/rules/storage_never_freed",permalink:"/linter/rules/storage_never_freed",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/linter/rules/storage_never_freed.md",tags:[],version:"current",frontMatter:{title:"storage_never_freed",hide_title:!0,description:"storage_never_freed lint documentation"},sidebar:"reference",previous:{title:"primitive_topic",permalink:"/linter/rules/primitive_topic"},next:{title:"strict_balance_equality",permalink:"/linter/rules/strict_balance_equality"}},l={},c=[{value:"What it does",id:"what-it-does",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Example",id:"example",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"storage_never_freed"},"storage_never_freed"),(0,a.kt)("h2",{id:"what-it-does"},"What it does"),(0,a.kt)("p",null,"This lint ensures that for every storage field with a collection type, when there is an\noperation to insert new elements, there's also an operation for removing elements."),(0,a.kt)("h2",{id:"why-is-this-bad"},"Why is this bad?"),(0,a.kt)("p",null,"When a user executes a contract function that writes to storage, they have to put a\ndeposit down for the amount of storage space used. Whoever frees up that storage at some\nlater point gets the deposit back. Therefore, it is always a good idea to make it possible\nfor users to free up their storage space."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"In the following example there is a storage field with the ",(0,a.kt)("inlineCode",{parentName:"p"},"Mapping")," type that has an\nfunction that inserts new elements:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\npub struct Transaction {\n    values: Mapping<AccountId, AccountId>,\n}\n\nfn add_value(&mut self, k: &AccountId, v: &AccountId) {\n    // ...\n    self.values.insert(k, v);\n    // ...\n}\n")),(0,a.kt)("p",null,"But, ideally, there also should be a function that allows the user to remove elements from\nthe Mapping freeing storage space:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn del_value(&mut self, k: &AccountId) {\n    // ...\n    self.values.remove(k);\n    // ...\n}\n")))}d.isMDXComponent=!0}}]);