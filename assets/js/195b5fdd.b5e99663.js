"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[2555],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),f=o,m=p["".concat(i,".").concat(f)]||p[f]||d[f]||l;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var s=2;s<l;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},39357:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const l={title:"2. Connect Wallet",description:"Connect to a browser wallet extension"},a="Connect Wallet",c={unversionedId:"frontend/connect-wallet",id:"frontend/connect-wallet",title:"2. Connect Wallet",description:"Connect to a browser wallet extension",source:"@site/docs/frontend/connect-wallet.md",sourceDirName:"frontend",slug:"/frontend/connect-wallet",permalink:"/frontend/connect-wallet",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/connect-wallet.md",tags:[],version:"current",frontMatter:{title:"2. Connect Wallet",description:"Connect to a browser wallet extension"},sidebar:"reference",previous:{title:"1. Getting Started",permalink:"/frontend/getting-started"},next:{title:"All Hooks",permalink:"/frontend/hooks"}},i={},s=[{value:"useWallet()",id:"usewallet",level:2}],u={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"connect-wallet"},"Connect Wallet"),(0,o.kt)("p",null,"A user must first grant permission in a browser wallet extension for your dApp before it can read account information or request a signature for a transaction. ",(0,o.kt)("inlineCode",{parentName:"p"},"useWallet()")," gives you everything you need to do this. ",(0,o.kt)("inlineCode",{parentName:"p"},"useAllWallets()")," returns a list of supported extensions so that you can let the user choose which wallet they would like to connect. e.g. Talisman, PolkadotJS, Subwallet, etc."),(0,o.kt)("h2",{id:"usewallet"},"useWallet()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useWallet, useAllWallets } from 'useink';\n\nexport const ConnectWallet = ({ children }) => {\n  const { account, connect, disconnect } = useWallet()\n  const wallets = useAllWallets();\n  \n  if (!account) {\n    return (\n      <ul>\n        {wallets.map((w) => (\n          <li key={w.title}>\n            {w.installed ? (\n              <button onClick={() => connect(w.extensionName)}>\n                <img src={w.logo.src} alt={w.logo.alt} />\n                Connect to {w.title}\n              </button>\n            ) : (\n              <a href={w.installUrl}>\n                <img src={w.logo.src} alt={w.logo.alt} />\n                Install {w.title}\n              </a>\n            )}\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  return (\n    <>\n      <p>You are connected as {account?.name || account.address}</p>\n\n      <button onClick={disconnect}>\n        Disconnect Wallet\n      </button>\n    </>\n  )\n}\n")),(0,o.kt)("p",null,"After a wallet has been connected any changes made in permissions in the wallet will automatically update in the React application.\n",(0,o.kt)("inlineCode",{parentName:"p"},"useWallet")," has many more features including tools for switching between accounts. You can ",(0,o.kt)("a",{parentName:"p",href:"/frontend/react/hooks/wallets/use-wallet"},"learn more about useWallet here"),"."))}d.isMDXComponent=!0}}]);