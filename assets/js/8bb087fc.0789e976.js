"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[5592],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(n),h=r,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||l;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},49581:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={title:"Cross-Contract Calling",slug:"/basics/cross-contract-calling",hide_title:!0},i=void 0,o={unversionedId:"basics/cross-contract-calling",id:"basics/cross-contract-calling",title:"Cross-Contract Calling",description:"In ink! contracts it is possible to call messages and constructors of other",source:"@site/docs/basics/cross-contract-calling.md",sourceDirName:"basics",slug:"/basics/cross-contract-calling",permalink:"/basics/cross-contract-calling",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/basics/cross-contract-calling.md",tags:[],version:"current",frontMatter:{title:"Cross-Contract Calling",slug:"/basics/cross-contract-calling",hide_title:!0},sidebar:"reference",previous:{title:"Trait Definitions",permalink:"/basics/trait-definitions"},next:{title:"Upgradeable Contracts",permalink:"/basics/upgradeable-contracts"}},c={},s=[{value:"Contract References",id:"contract-references",level:2},{value:"<code>BasicContractRef</code> walkthrough",id:"basiccontractref-walkthrough",level:3},{value:"Prepping <code>OtherContract</code>",id:"prepping-othercontract",level:4},{value:"Importing <code>OtherContract</code>",id:"importing-othercontract",level:4},{value:"Wiring <code>BasicContractRef</code>",id:"wiring-basiccontractref",level:4},{value:"Uploading <code>OtherContract</code>",id:"uploading-othercontract",level:4},{value:"Instantiating <code>OtherContract</code> through <code>BasicContractRef</code>",id:"instantiating-othercontract-through-basiccontractref",level:4},{value:"Calling with <code>OtherContract</code> through <code>BasicContractRef</code>",id:"calling-with-othercontract-through-basiccontractref",level:4},{value:"Builders",id:"builders",level:2},{value:"CreateBuilder",id:"createbuilder",level:3},{value:"CallBuilder",id:"callbuilder",level:3},{value:"CallBuilder: Call",id:"callbuilder-call",level:4},{value:"CallBuilder: Delegate Call",id:"callbuilder-delegate-call",level:4},{value:"Builder Error Handling",id:"builder-error-handling",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("img",{src:"/img/title/cross-contract.svg",className:"titlePic"}),(0,r.kt)("h1",{id:"cross-contract-calls"},"Cross-Contract Calls"),(0,r.kt)("p",null,"In ink! contracts it is possible to call messages and constructors of other\non-chain contracts."),(0,r.kt)("p",null,"There are a few approaches to performing these cross-contract calls in ink!:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Contract references (i.e ",(0,r.kt)("inlineCode",{parentName:"li"},"ContractRef"),")"),(0,r.kt)("li",{parentName:"ol"},"Builders (i.e ",(0,r.kt)("inlineCode",{parentName:"li"},"CreateBuilder")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"CallBuilder"),")")),(0,r.kt)("p",null,"Contract references can only be used for cross-contract calls to other ink! contracts.\nBuilders can be used to issue cross-contract calls to any Wasm contract, such as those\nwritten in ink!, Solang, or ask!."),(0,r.kt)("h2",{id:"contract-references"},"Contract References"),(0,r.kt)("p",null,"Contract references refer to structs that are generated by the ink! code generation for the\npurposes of cross-contract calls."),(0,r.kt)("p",null,"They give developers a type-safe way of interacting with a contract."),(0,r.kt)("p",null,"A downside to using them is that you need to import the contract you want to call as a\ndependency of your own contract."),(0,r.kt)("p",null,"If you want to interact with a contract that is already on-chain you will need to use the\n",(0,r.kt)("a",{parentName:"p",href:"/basics/cross-contract-calling#builders"},(0,r.kt)("inlineCode",{parentName:"a"},"Builders"))," approach instead."),(0,r.kt)("h3",{id:"basiccontractref-walkthrough"},(0,r.kt)("inlineCode",{parentName:"h3"},"BasicContractRef")," walkthrough"),(0,r.kt)("p",null,"We will walk through the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/tree/master/integration-tests/basic-contract-caller"},(0,r.kt)("inlineCode",{parentName:"a"},"basic_contract_ref")),"\nexample in order to demonstrate how cross-contract calls using contract references work."),(0,r.kt)("p",null,"The general workflow will be:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Prepare ",(0,r.kt)("inlineCode",{parentName:"li"},"OtherContract")," to be imported to other contracts"),(0,r.kt)("li",{parentName:"ol"},"Import ",(0,r.kt)("inlineCode",{parentName:"li"},"OtherContract")," into ",(0,r.kt)("inlineCode",{parentName:"li"},"BasicContractRef")),(0,r.kt)("li",{parentName:"ol"},"Upload ",(0,r.kt)("inlineCode",{parentName:"li"},"OtherContract")," on-chain"),(0,r.kt)("li",{parentName:"ol"},"Instantiate ",(0,r.kt)("inlineCode",{parentName:"li"},"OtherContract")," using ",(0,r.kt)("inlineCode",{parentName:"li"},"BasicContractRef")),(0,r.kt)("li",{parentName:"ol"},"Call ",(0,r.kt)("inlineCode",{parentName:"li"},"OtherContract")," using ",(0,r.kt)("inlineCode",{parentName:"li"},"BasicContractRef"))),(0,r.kt)("h4",{id:"prepping-othercontract"},"Prepping ",(0,r.kt)("inlineCode",{parentName:"h4"},"OtherContract")),(0,r.kt)("p",null,"We need to make sure that the ink! generated contract ref for ",(0,r.kt)("inlineCode",{parentName:"p"},"OtherContract")," is\navailable to other pieces of code."),(0,r.kt)("p",null,"We do this by re-exporting the contract reference as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub use self::other_contract::OtherContractRef;\n")),(0,r.kt)("h4",{id:"importing-othercontract"},"Importing ",(0,r.kt)("inlineCode",{parentName:"h4"},"OtherContract")),(0,r.kt)("p",null,"Next, we need to import ",(0,r.kt)("inlineCode",{parentName:"p"},"OtherContract")," to our ",(0,r.kt)("inlineCode",{parentName:"p"},"BasicContractRef")," contract."),(0,r.kt)("p",null,"First, we add the following lines to our ",(0,r.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'# In `basic_contract_ref/Cargo.toml`\n\nother_contract = { path = "other_contract", default-features = false, features = ["ink-as-dependency"] }\n\n# -- snip --\n\n[features]\ndefault = ["std"]\nstd = [\n    "ink/std",\n    # -- snip --\n    "other_contract/std",\n]\n')),(0,r.kt)("p",null,"Two things to note here:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"If we don't specify the ",(0,r.kt)("inlineCode",{parentName:"li"},"ink-as-dependency")," feature we will end up with linking\nerrors."),(0,r.kt)("li",{parentName:"ol"},"If we don't enable the ",(0,r.kt)("inlineCode",{parentName:"li"},"std")," feature for ",(0,r.kt)("inlineCode",{parentName:"li"},"std")," builds we will not be able to generate\nour contract's metadata.")),(0,r.kt)("h4",{id:"wiring-basiccontractref"},"Wiring ",(0,r.kt)("inlineCode",{parentName:"h4"},"BasicContractRef")),(0,r.kt)("p",null,"First, we will import the contract reference of ",(0,r.kt)("inlineCode",{parentName:"p"},"OtherContract"),", and declare the\nreference to be part of our storage struct."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// In `basic_contract_ref/lib.rs`\n\nuse other_contract::OtherContractRef;\n\n#[ink(storage)]\npub struct BasicContractRef {\n    other_contract: OtherContractRef,\n}\n")),(0,r.kt)("p",null,"Next, we to add a way to instantiate ",(0,r.kt)("inlineCode",{parentName:"p"},"OtherContract"),". We do this from the constructor of our\nof contract."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// In `basic_contract_ref/lib.rs`\n\n#[ink(constructor)]\npub fn new(other_contract_code_hash: Hash) -> Self {\n    let other_contract = OtherContractRef::new(true)\n        .code_hash(other_contract_code_hash)\n        .endowment(0)\n        .salt_bytes([0xDE, 0xAD, 0xBE, 0xEF])\n        .instantiate();\n\n    Self { other_contract }\n}\n")),(0,r.kt)("p",null,"Note that for instantiating a contract we need access to the uploaded on-chain\n",(0,r.kt)("inlineCode",{parentName:"p"},"code_hash"),". We will get back to this later."),(0,r.kt)("p",null,"Once we have an instantiated reference to ",(0,r.kt)("inlineCode",{parentName:"p"},"OtherContract")," we can call its messages just\nlike normal Rust methods!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// In `basic_contract_ref/lib.rs`\n\n#[ink(message)]\npub fn flip_and_get(&mut self) -> bool {\n    self.other_contract.flip();\n    self.other_contract.get()\n}\n")),(0,r.kt)("h4",{id:"uploading-othercontract"},"Uploading ",(0,r.kt)("inlineCode",{parentName:"h4"},"OtherContract")),(0,r.kt)("p",null,"You will need the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/substrate-contracts-node"},(0,r.kt)("inlineCode",{parentName:"a"},"substrate-contracts-node")),"\nrunning in the background for the next steps."),(0,r.kt)("p",null,"We can upload ",(0,r.kt)("inlineCode",{parentName:"p"},"OtherContract")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo-contract")," as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# In the `basic_contract_ref` directory\ncargo contract build --manifest-path other_contract/Cargo.toml\ncargo contract upload --manifest-path other_contract/Cargo.toml --suri //Alice\n")),(0,r.kt)("p",null,"If successful, this will output in a ",(0,r.kt)("inlineCode",{parentName:"p"},"code_hash")," similar to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Code hash "0x74a610235df4ff0161f0247e4c9d73934b70c1520d24ef843f9df9fcc3e63caa"\n')),(0,r.kt)("p",null,"We can then use this ",(0,r.kt)("inlineCode",{parentName:"p"},"code_hash")," to instantiate our ",(0,r.kt)("inlineCode",{parentName:"p"},"BasicContractRef")," contract."),(0,r.kt)("h4",{id:"instantiating-othercontract-through-basiccontractref"},"Instantiating ",(0,r.kt)("inlineCode",{parentName:"h4"},"OtherContract")," through ",(0,r.kt)("inlineCode",{parentName:"h4"},"BasicContractRef")),(0,r.kt)("p",null,"We will first need to instantiate ",(0,r.kt)("inlineCode",{parentName:"p"},"BasicContractRef"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# In the `basic_contract_ref` directory\ncargo contract build\ncargo contract instantiate \\\n    --constructor new \\\n    --args 0x74a610235df4ff0161f0247e4c9d73934b70c1520d24ef843f9df9fcc3e63caa \\\n    --suri //Alice --salt $(date +%s)\n")),(0,r.kt)("p",null,"If successful, this will output in a contract address for ",(0,r.kt)("inlineCode",{parentName:"p"},"BasicContractRef")," similar to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Contract 5CWz6Xnivp9PSoZq6qPRP8xVAShZgtNVGTCLCsq3qzqPV7Rq\n")),(0,r.kt)("h4",{id:"calling-with-othercontract-through-basiccontractref"},"Calling with ",(0,r.kt)("inlineCode",{parentName:"h4"},"OtherContract")," through ",(0,r.kt)("inlineCode",{parentName:"h4"},"BasicContractRef")),(0,r.kt)("p",null,"Finally, we can call the ",(0,r.kt)("inlineCode",{parentName:"p"},"OtherContract")," methods through ",(0,r.kt)("inlineCode",{parentName:"p"},"BasicContractRef")," as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cargo contract call --contract 5CWz6Xnivp9PSoZq6qPRP8xVAShZgtNVGTCLCsq3qzqPV7Rq \\\n    --message flip_and_get --suri //Alice --dry-run\n")),(0,r.kt)("p",null,"Which will result in something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Result Success!\nReverted false\nData Ok(true)\n")),(0,r.kt)("h2",{id:"builders"},"Builders"),(0,r.kt)("p",null,"The\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/ink_env/latest/ink_env/call/struct.CreateBuilder.html"},(0,r.kt)("inlineCode",{parentName:"a"},"CreateBuilder")),"\nand\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/ink_env/latest/ink_env/call/struct.CallBuilder.html"},(0,r.kt)("inlineCode",{parentName:"a"},"CallBuilder")),"\noffer low-level, flexible interfaces for performing cross-contract calls. The\n",(0,r.kt)("inlineCode",{parentName:"p"},"CreateBuilder")," allows you to instantiate already uploaded contracts, and the\n",(0,r.kt)("inlineCode",{parentName:"p"},"CallBuilder")," allows you to call messages on instantiated contracts."),(0,r.kt)("h3",{id:"createbuilder"},"CreateBuilder"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateBuilder")," offers an an easy way for you to ",(0,r.kt)("strong",{parentName:"p"},"instantiate")," a contract. Note\nthat you'll still need this contract to have been previously uploaded."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For a refresher on the difference between ",(0,r.kt)("inlineCode",{parentName:"p"},"upload")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"instantiate"),"\n",(0,r.kt)("a",{parentName:"p",href:"/getting-started/deploy-your-contract"},"see here"),".")),(0,r.kt)("p",null,"In order to instantiate a contract you need a reference to your contract, just like in\n",(0,r.kt)("a",{parentName:"p",href:"/basics/cross-contract-calling#contract-references"},"the previous section"),"."),(0,r.kt)("p",null,"Below is an example of how to instantiate a contract using the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateBuilder"),". We will:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"instantiate the uploaded contract with a ",(0,r.kt)("inlineCode",{parentName:"li"},"code_hash")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"0x4242...")),(0,r.kt)("li",{parentName:"ul"},"with no gas limit specified (",(0,r.kt)("inlineCode",{parentName:"li"},"0")," means unlimited)"),(0,r.kt)("li",{parentName:"ul"},"sending ",(0,r.kt)("inlineCode",{parentName:"li"},"10")," units of transferred value to the contract instance"),(0,r.kt)("li",{parentName:"ul"},"instantiating with the ",(0,r.kt)("inlineCode",{parentName:"li"},"new")," constructor"),(0,r.kt)("li",{parentName:"ul"},"with the following arguments",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a ",(0,r.kt)("inlineCode",{parentName:"li"},"u8")," with value ",(0,r.kt)("inlineCode",{parentName:"li"},"42")),(0,r.kt)("li",{parentName:"ul"},"a ",(0,r.kt)("inlineCode",{parentName:"li"},"bool")," with value ",(0,r.kt)("inlineCode",{parentName:"li"},"true")),(0,r.kt)("li",{parentName:"ul"},"an array of 32 ",(0,r.kt)("inlineCode",{parentName:"li"},"u8")," with value ",(0,r.kt)("inlineCode",{parentName:"li"},"0x10")))),(0,r.kt)("li",{parentName:"ul"},"generate the address (",(0,r.kt)("inlineCode",{parentName:"li"},"AccountId"),") using the specified ",(0,r.kt)("inlineCode",{parentName:"li"},"salt_bytes")),(0,r.kt)("li",{parentName:"ul"},"and we expect it to return a value of type ",(0,r.kt)("inlineCode",{parentName:"li"},"MyContractRef"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use contract::MyContractRef;\nlet my_contract: MyContractRef = build_create::<MyContractRef>()\n    .code_hash(Hash::from([0x42; 32]))\n    .gas_limit(0)\n    .endowment(10)\n    .exec_input(\n        ExecutionInput::new(Selector::new(ink::selector_bytes!("new")))\n            .push_arg(42)\n            .push_arg(true)\n            .push_arg(&[0x10u8; 32])\n    )\n    .salt_bytes(&[0xDE, 0xAD, 0xBE, 0xEF])\n    .returns::<MyContractRef>()\n    .instantiate();\n')),(0,r.kt)("p",null,"Since ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateBuilder::instantiate()")," returns a contract reference, we can use this\ncontract reference to call messages just like in the\n",(0,r.kt)("a",{parentName:"p",href:"/basics/cross-contract-calling#contract-references"},"previous section"),"."),(0,r.kt)("h3",{id:"callbuilder"},"CallBuilder"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CallBuilder")," gives you a couple of ways to call messages from other contracts. There\nare two main approaches to this: ",(0,r.kt)("inlineCode",{parentName:"p"},"Call"),"s and ",(0,r.kt)("inlineCode",{parentName:"p"},"DelegateCall"),"s. We will briefly cover both\nhere."),(0,r.kt)("h4",{id:"callbuilder-call"},"CallBuilder: Call"),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"Call"),"s the ",(0,r.kt)("inlineCode",{parentName:"p"},"CallBuilder")," requires an already instantiated contract."),(0,r.kt)("p",null,"We saw an example of how to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateBuilder")," to instantiate contracts in the\n",(0,r.kt)("a",{parentName:"p",href:"/basics/cross-contract-calling#contract-references"},"previous section"),"."),(0,r.kt)("p",null,"Below is an example of how to call a contract using the ",(0,r.kt)("inlineCode",{parentName:"p"},"CallBuilder"),". We will:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"make a regular ",(0,r.kt)("inlineCode",{parentName:"li"},"Call")),(0,r.kt)("li",{parentName:"ul"},"to a contract at the address ",(0,r.kt)("inlineCode",{parentName:"li"},"0x4242...")),(0,r.kt)("li",{parentName:"ul"},"with no gas limit specified (",(0,r.kt)("inlineCode",{parentName:"li"},"0")," means unlimited)"),(0,r.kt)("li",{parentName:"ul"},"sending ",(0,r.kt)("inlineCode",{parentName:"li"},"10")," units of transferred value to the contract instance"),(0,r.kt)("li",{parentName:"ul"},"calling the ",(0,r.kt)("inlineCode",{parentName:"li"},"flip")," message"),(0,r.kt)("li",{parentName:"ul"},"with the following arguments",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a ",(0,r.kt)("inlineCode",{parentName:"li"},"u8")," with value ",(0,r.kt)("inlineCode",{parentName:"li"},"42")),(0,r.kt)("li",{parentName:"ul"},"a ",(0,r.kt)("inlineCode",{parentName:"li"},"bool")," with value ",(0,r.kt)("inlineCode",{parentName:"li"},"true")),(0,r.kt)("li",{parentName:"ul"},"an array of 32 ",(0,r.kt)("inlineCode",{parentName:"li"},"u8")," with value ",(0,r.kt)("inlineCode",{parentName:"li"},"0x10")))),(0,r.kt)("li",{parentName:"ul"},"and we expect it to return a value of type ",(0,r.kt)("inlineCode",{parentName:"li"},"bool"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let my_return_value = build_call::<DefaultEnvironment>()\n    .call(AccountId::from([0x42; 32]))\n    .gas_limit(0)\n    .transferred_value(10)\n    .exec_input(\n        ExecutionInput::new(Selector::new(ink::selector_bytes!("flip")))\n            .push_arg(42u8)\n            .push_arg(true)\n            .push_arg(&[0x10u8; 32])\n    )\n    .returns::<bool>()\n    .invoke();\n')),(0,r.kt)("p",null,"Note:"),(0,r.kt)("p",null,"Message arguments will be encoded in the order in which they are provided to the ",(0,r.kt)("inlineCode",{parentName:"p"},"CallBuilder"),".\nThis means that they should match the order (and type) they appear in the function\nsignature."),(0,r.kt)("p",null,"You will not be able to get any feedback about this at compile time. You will only\nfind out your call failed at runtime!"),(0,r.kt)("h4",{id:"callbuilder-delegate-call"},"CallBuilder: Delegate Call"),(0,r.kt)("p",null,"You can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"CallBuilder")," to craft calls using ",(0,r.kt)("inlineCode",{parentName:"p"},"DelegateCall")," mechanics.\nIf you need a refresher on what delegate calls are,\n",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c"},"see this article"),"."),(0,r.kt)("p",null,"In the case of ",(0,r.kt)("inlineCode",{parentName:"p"},"DelegateCall"),"s, we don't require an already instantiated contract.\nWe only need the ",(0,r.kt)("inlineCode",{parentName:"p"},"code_hash")," of an uploaded contract."),(0,r.kt)("p",null,"Below is an example of how to delegate call a contract using the ",(0,r.kt)("inlineCode",{parentName:"p"},"CallBuilder"),". We will:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"make a ",(0,r.kt)("inlineCode",{parentName:"li"},"DelegateCall")),(0,r.kt)("li",{parentName:"ul"},"to a contract with a ",(0,r.kt)("inlineCode",{parentName:"li"},"code_hash")," (not contract address!) of ",(0,r.kt)("inlineCode",{parentName:"li"},"0x4242...")),(0,r.kt)("li",{parentName:"ul"},"calling the ",(0,r.kt)("inlineCode",{parentName:"li"},"flip")," message"),(0,r.kt)("li",{parentName:"ul"},"with the following arguments",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a ",(0,r.kt)("inlineCode",{parentName:"li"},"u8")," with value ",(0,r.kt)("inlineCode",{parentName:"li"},"42")),(0,r.kt)("li",{parentName:"ul"},"a ",(0,r.kt)("inlineCode",{parentName:"li"},"bool")," with value ",(0,r.kt)("inlineCode",{parentName:"li"},"true")),(0,r.kt)("li",{parentName:"ul"},"an array of 32 ",(0,r.kt)("inlineCode",{parentName:"li"},"u8")," with value ",(0,r.kt)("inlineCode",{parentName:"li"},"0x10")))),(0,r.kt)("li",{parentName:"ul"},"and we expect it to return an ",(0,r.kt)("inlineCode",{parentName:"li"},"i32"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let my_return_value = build_call::<DefaultEnvironment>()\n    .delegate(ink::primitives::Hash::from([0x42; 32]))\n    .exec_input(\n        ExecutionInput::new(Selector::new(ink::selector_bytes!("flip")))\n            .push_arg(42u8)\n            .push_arg(true)\n            .push_arg(&[0x10u8; 32])\n    )\n    .returns::<i32>()\n    .invoke();\n')),(0,r.kt)("h3",{id:"builder-error-handling"},"Builder Error Handling"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateBuilder")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"CallBuilder")," both offer error handling with the\n",(0,r.kt)("inlineCode",{parentName:"p"},"try_instantiate()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"try_invoke()")," methods respectively."),(0,r.kt)("p",null,"These allow contract developers to handle two types of errors:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Errors from the underlying execution environment (e.g the Contracts pallet)"),(0,r.kt)("li",{parentName:"ol"},"Error from the programming language (e.g ",(0,r.kt)("inlineCode",{parentName:"li"},"LangError"),"s)")),(0,r.kt)("p",null,"See the documentation for\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/ink_env/latest/ink_env/call/struct.CreateBuilder.html#method.try_instantiate"},(0,r.kt)("inlineCode",{parentName:"a"},"try_instantiate")),",\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/ink_env/latest/ink_env/call/struct.CallBuilder.html#method.try_invoke-2"},(0,r.kt)("inlineCode",{parentName:"a"},"try_invoke")),",\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/ink_env/latest/ink_env/enum.Error.html"},(0,r.kt)("inlineCode",{parentName:"a"},"ink::env::Error")),"\nand\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/ink/latest/ink/enum.LangError.html"},(0,r.kt)("inlineCode",{parentName:"a"},"ink::LangError")),"\nfor more details on proper error handling."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Because the ",(0,r.kt)("inlineCode",{parentName:"p"},"CallBuilder")," requires only a contract's ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountId")," and message ",(0,r.kt)("inlineCode",{parentName:"p"},"selector"),",\nwe can call Solidity contracts compiled using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hyperledger/solang"},"Solang"),"\ncompiler and deployed to a chain that supports the ",(0,r.kt)("inlineCode",{parentName:"p"},"pallet-contracts"),".\nSee ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/xermicus/call_solidity"},"here")," for an example of how to do that."),(0,r.kt)("p",{parentName:"admonition"},"The reverse, calls from Solidity to ink!, are ",(0,r.kt)("strong",{parentName:"p"},"not")," supported by Solang, but there are\nplans to implement this in the future.")))}u.isMDXComponent=!0}}]);