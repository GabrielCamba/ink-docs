"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[2491],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(a),h=r,m=p["".concat(s,".").concat(h)]||p[h]||u[h]||o;return a?n.createElement(m,i(i({ref:t},d),{},{components:a})):n.createElement(m,i({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},28122:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={title:"Metadata Format",slug:"/datastructures/storage-in-metadata",hide_title:!0},i=void 0,l={unversionedId:"datastructures/storage-in-metadata",id:"version-5.x/datastructures/storage-in-metadata",title:"Metadata Format",description:"The storage layout of a contract is reflected inside the metadata. It allows third-party",source:"@site/versioned_docs/version-5.x/datastructures/storage-in-metadata.md",sourceDirName:"datastructures",slug:"/datastructures/storage-in-metadata",permalink:"/5.x/datastructures/storage-in-metadata",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-5.x/datastructures/storage-in-metadata.md",tags:[],version:"5.x",frontMatter:{title:"Metadata Format",slug:"/datastructures/storage-in-metadata",hide_title:!0},sidebar:"reference",previous:{title:"Custom Data Structures",permalink:"/5.x/datastructures/custom-datastructure"},next:{title:"Overview",permalink:"/5.x/frontend/overview"}},s={},c=[{value:"Storage key calculation for ink! <code>Mapping</code> values",id:"storage-key-calculation-for-ink-mapping-values",level:2},{value:"Accessing storage items with the <code>contractsApi</code> runtime call API",id:"accessing-storage-items-with-the-contractsapi-runtime-call-api",level:2},{value:"Accessing storage items with the <code>childState</code> RPC call API",id:"accessing-storage-items-with-the-childstate-rpc-call-api",level:2},{value:"Finding the contracts child trie ID",id:"finding-the-contracts-child-trie-id",level:3},{value:"Calculate the <code>PrefixedStorageKey</code> from the child trie ID",id:"calculate-the-prefixedstoragekey-from-the-child-trie-id",level:3},{value:"Calculate the storage key using transparent hashing",id:"calculate-the-storage-key-using-transparent-hashing",level:3},{value:"A full example",id:"a-full-example",level:3}],d={toc:c},p="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("img",{src:"/img/title/storage.svg",className:"titlePic"}),(0,r.kt)("h1",{id:"metadata-format"},"Metadata Format"),(0,r.kt)("p",null,"The storage layout of a contract is reflected inside the metadata. It allows third-party\ntooling to work with contract storage and can also help to better understand the storage\nlayout of any given contract."),(0,r.kt)("p",null,"Given a contract with the following storage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\npub struct MyContract {\n    balance: Balance,\n    block: BlockNumber,\n    lazy: Lazy<bool>,\n}\n")),(0,r.kt)("p",null,"The storage will be reflected inside the metadata as like follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"root": {\n  "layout": {\n    "struct": {\n      "fields": [\n        {\n          "layout": {\n            "leaf": {\n              "key": "0x00000000",\n              "ty": 0\n            }\n          },\n          "name": "balance"\n        },\n        {\n          "layout": {\n            "leaf": {\n              "key": "0x00000000",\n              "ty": 1\n            }\n          },\n          "name": "block"\n        },\n        {\n          "layout": {\n            "root": {\n              "layout": {\n                "leaf": {\n                  "key": "0xb1f4904e",\n                  "ty": 2\n                }\n              },\n              "root_key": "0xb1f4904e"\n            }\n          },\n          "name": "lazy"\n        }\n      ],\n      "name": "MyContract"\n    }\n  },\n  "root_key": "0x00000000"\n}\n')),(0,r.kt)("p",null,"We observe that the storage layout is represented as a tree, where tangible storage values\nend up inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"leaf"),". Because of\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/ink_storage_traits/4.0.0/ink_storage_traits/trait.Packed.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Packed")),"\nencoding, leafs can share the same storage key, and\nin order to reach them you'd need to fetch and decode the whole storage cell under this key."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"root_key")," is meant to either be used to directly access a ",(0,r.kt)("inlineCode",{parentName:"p"},"Packed")," storage field\nor to serve as the base key for calculating the actual keys needed to access values in\nnon-",(0,r.kt)("inlineCode",{parentName:"p"},"Packed")," fields (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"Mapping"),"s)."),(0,r.kt)("h2",{id:"storage-key-calculation-for-ink-mapping-values"},"Storage key calculation for ink! ",(0,r.kt)("inlineCode",{parentName:"h2"},"Mapping")," values"),(0,r.kt)("p",null,"Base storage keys are always 4 bytes in size. However, the storage API of the contracts\npallet supports keys of arbitrary length. In order to reach a mapping value, the storage\nkey of said value is calculated at runtime."),(0,r.kt)("p",null,"The formula to calculate the base storage key ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," used to access a mapping value under the\nkey ",(0,r.kt)("inlineCode",{parentName:"p"},"K")," for a mapping with base key ",(0,r.kt)("inlineCode",{parentName:"p"},"B")," can be expressed as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"S = scale::encode(B) + scale::encode(K)\n")),(0,r.kt)("p",null,"Where the base key ",(0,r.kt)("inlineCode",{parentName:"p"},"B")," is the ",(0,r.kt)("inlineCode",{parentName:"p"},"root_key")," (of type ",(0,r.kt)("inlineCode",{parentName:"p"},"u32"),") found in the contract metadata."),(0,r.kt)("p",null,"In words, SCALE encode the base (root) key of the mapping and concatenate it with the\nSCALE encoded key of the mapped value to obtain the actual storage key used to\naccess the mapped value."),(0,r.kt)("p",null,"Given the following contract storage, which maps accounts to a balance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\npub struct Contract {\n    roles: Mapping<AccountId, Balance, ManualKey<0x12345678>>,\n}\n")),(0,r.kt)("p",null,"Now let's suppose we are interested in finding the balance for the account\n",(0,r.kt)("inlineCode",{parentName:"p"},"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY"),". The storage key is calculated as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"SCALE encode the base key of the mapping (",(0,r.kt)("inlineCode",{parentName:"li"},"0x12345678u32"),"), resulting in ",(0,r.kt)("inlineCode",{parentName:"li"},"0x78563412")),(0,r.kt)("li",{parentName:"ol"},"SCALE encode the ",(0,r.kt)("inlineCode",{parentName:"li"},"AccountId"),", which will be\n",(0,r.kt)("inlineCode",{parentName:"li"},"0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d"),".\nNote that you'll need to convert the SS58 into a ",(0,r.kt)("inlineCode",{parentName:"li"},"AccountId32")," first."),(0,r.kt)("li",{parentName:"ol"},"Concatenating those two will result in the key\n",(0,r.kt)("inlineCode",{parentName:"li"},"0x78563412d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let account_id = "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY";\nlet account: AccountId32 = Ss58Codec::from_string(account_id).unwrap();\nlet storage_key = &(0x12345678u32, account).encode();\nprintln!("0x{}", hex::encode(storage_key));\n// 0x78563412d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d\n')),(0,r.kt)("h2",{id:"accessing-storage-items-with-the-contractsapi-runtime-call-api"},"Accessing storage items with the ",(0,r.kt)("inlineCode",{parentName:"h2"},"contractsApi")," runtime call API"),(0,r.kt)("p",null,"There are two ways to query for storage fields of smart contracts from outside a contract.\nBoth methods are accessible via the ",(0,r.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/"},(0,r.kt)("inlineCode",{parentName:"a"},"polkadot-js"))," web UI."),(0,r.kt)("p",null,"The straight forward way to query a contracts storage is via a\n",(0,r.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/#/runtime"},(0,r.kt)("inlineCode",{parentName:"a"},"runtime API"))," call, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"contractsApi"),"\nendpoint provided by the contracts pallet. The endpoint provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"getStorage")," method,\nwhich just expects a contract address and a storage key as arguments."),(0,r.kt)("p",null,"For example, to access the root storage struct under the key ",(0,r.kt)("inlineCode",{parentName:"p"},"0x00000000")," of a contract,\njust specify the contract's address and the storage key ",(0,r.kt)("inlineCode",{parentName:"p"},"0x00000000")," as-is. The API call\nwill return the scale-encoded root storage struct of the contract."),(0,r.kt)("h2",{id:"accessing-storage-items-with-the-childstate-rpc-call-api"},"Accessing storage items with the ",(0,r.kt)("inlineCode",{parentName:"h2"},"childState")," RPC call API"),(0,r.kt)("p",null,"Under the hood, each contract gets its own\n",(0,r.kt)("a",{parentName:"p",href:"https://paritytech.github.io/substrate/master/frame_support/storage/child/index.html"},"child trie"),", where its storage items are actually stored."),(0,r.kt)("p",null,"Additionally, the contracts pallet uses the\n",(0,r.kt)("a",{parentName:"p",href:"https://paritytech.github.io/substrate/master/frame_support/struct.Blake2_128Concat.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Blake2 128 Concat")),"\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.substrate.io/build/runtime-storage/#transparent-hashing-algorithms"},(0,r.kt)("inlineCode",{parentName:"a"},"Transparent hashing algorithm")),"\nto calculate storage keys for any stored item inside the child trie.\nYou'll need to account for that as well."),(0,r.kt)("p",null,"With that in mind, to directly access storage items of any on-chain contract using a\nchildState ",(0,r.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/#/rpc"},(0,r.kt)("inlineCode",{parentName:"a"},"RPC call")),", you'll need the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The child trie ID of the contract, represented as a ",(0,r.kt)("a",{parentName:"li",href:"https://docs.rs/sp-storage/10.0.0/sp_storage/struct.PrefixedStorageKey.html"},(0,r.kt)("inlineCode",{parentName:"a"},"PrefixedStorageKey"))),(0,r.kt)("li",{parentName:"ul"},"The hashed storage key of the storage field")),(0,r.kt)("h3",{id:"finding-the-contracts-child-trie-id"},"Finding the contracts child trie ID"),(0,r.kt)("p",null,"The child trie ID is the ",(0,r.kt)("inlineCode",{parentName:"p"},"Blake2_256")," hash of the contracts instantiation nonce\nconcatenated to it's ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountId"),". You can find it in\n",(0,r.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/#/chainstate"},(0,r.kt)("inlineCode",{parentName:"a"},"polkadot-js chainstate query interface")),",\nwhere you need to execute the ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts_contractInfoOf")," state query."),(0,r.kt)("p",null,"It can also be calculate manually according to the following code snippet. The\ninstantiation note of the contract must be still be known. You can get it using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"contracts_nonce")," chain state query in polkadot-js UI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use sp_core::crypto::Ss58Codec;\nuse parity_scale_codec::Encode;\n\n// Given our contract ID is 5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4\nlet account: AccountId32 =\n    Ss58Codec::from_string("5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4").unwrap();\n// Given our instantiation nonce was 1\nlet nonce: u64 = 1;\n\n// The child trie ID can be calculated as follows:\nlet trie_id = (&account, nonce).using_encoded(Blake2_256::hash);\n')),(0,r.kt)("h3",{id:"calculate-the-prefixedstoragekey-from-the-child-trie-id"},"Calculate the ",(0,r.kt)("inlineCode",{parentName:"h3"},"PrefixedStorageKey")," from the child trie ID"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"PrefixedStorageKey")," based on the child trie ID can be constructed using the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildInfo"),"\nprimitive as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use sp_core::storage::ChildInfo;\nlet prefixed_storage_key = ChildInfo::new_default(&trie_id).into_prefixed_storage_key();\n")),(0,r.kt)("h3",{id:"calculate-the-storage-key-using-transparent-hashing"},"Calculate the storage key using transparent hashing"),(0,r.kt)("p",null,"Finally, we calculate the hashed storage key of the storage item we are wanting to access.\nThe algorithm is simple: ",(0,r.kt)("inlineCode",{parentName:"p"},"Blake2_128")," hash the storage key and then concatenate the unhashed\nkey to the hash. Given you want to access the storage item under the ",(0,r.kt)("inlineCode",{parentName:"p"},"0x00000000"),",\nit will look like this in code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use frame_support::Blake2_128Concat;\n\n// The base key is 0x00000000\nlet storage_key = Blake2_128Concat::hash(&[0, 0, 0, 0]);\n")),(0,r.kt)("h3",{id:"a-full-example"},"A full example"),(0,r.kt)("p",null,"Let's recap the last few paragraphs into a full example. Given:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A contract at address ",(0,r.kt)("inlineCode",{parentName:"li"},"5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4")),(0,r.kt)("li",{parentName:"ul"},"With instantiation nonce of ",(0,r.kt)("inlineCode",{parentName:"li"},"1")),(0,r.kt)("li",{parentName:"ul"},"The root storage struct is to be found at base key ",(0,r.kt)("inlineCode",{parentName:"li"},"0x00000000"))),(0,r.kt)("p",null,"The following Rust program demonstrates how to calculate the ",(0,r.kt)("inlineCode",{parentName:"p"},"PrefixedStorageKey")," of the\ncontracts child trie, as well as the hashed key for the storage struct, which can then be\nused with the ",(0,r.kt)("inlineCode",{parentName:"p"},"chilstate")," RPC endpoint function ",(0,r.kt)("inlineCode",{parentName:"p"},"getStorage")," in polkadot-js to receive\nthe root storage struct of the contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use frame_support::{sp_runtime::AccountId32, Blake2_128Concat, Blake2_256, StorageHasher};\nuse parity_scale_codec::Encode;\nuse sp_core::{crypto::Ss58Codec, storage::ChildInfo};\nuse std::ops::Deref;\n\nfn main() {\n    // Find the child storage trie ID\n    let account_id = "5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4";\n    let account: AccountId32 = Ss58Codec::from_string(account_id).unwrap();\n    let instantiation_nonce = 1u64;\n    let trie_id = (account, instantiation_nonce).using_encoded(Blake2_256::hash);\n    assert_eq!(\n        hex::encode(trie_id),\n        "2fa252b7f996d28fd5d8b11098c09e56295eaf564299c6974421aa5ed887803b"\n    );\n\n    // Calculate the PrefixedStorageKey based on the trie ID\n    let prefixed_storage_key = ChildInfo::new_default(&trie_id).into_prefixed_storage_key();\n    println!("0x{}", hex::encode(prefixed_storage_key.deref()));\n    // 0x3a6368696c645f73746f726167653a64656661756c743a2fa252b7f996d28fd5d8b11098c09e56295eaf564299c6974421aa5ed887803b\n\n    // Calculate the storage key using transparent hashing\n    let storage_key = Blake2_128Concat::hash(&[0, 0, 0, 0]);\n    println!("0x{}", hex::encode(&storage_key));\n    // 0x11d2df4e979aa105cf552e9544ebd2b500000000\n}\n')))}u.isMDXComponent=!0}}]);