"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[7706],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,m=p["".concat(c,".").concat(d)]||p[d]||f[d]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},10721:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"useTxPaymentInfo",description:"React hook for getting the payment information and gas price of a transaction"},i="useTxPaymentInfo",s={unversionedId:"frontend/react/hooks/contracts/use-tx-payment-info",id:"frontend/react/hooks/contracts/use-tx-payment-info",title:"useTxPaymentInfo",description:"React hook for getting the payment information and gas price of a transaction",source:"@site/docs/frontend/react/hooks/contracts/use-tx-payment-info.md",sourceDirName:"frontend/react/hooks/contracts",slug:"/frontend/react/hooks/contracts/use-tx-payment-info",permalink:"/frontend/react/hooks/contracts/use-tx-payment-info",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/react/hooks/contracts/use-tx-payment-info.md",tags:[],version:"current",frontMatter:{title:"useTxPaymentInfo",description:"React hook for getting the payment information and gas price of a transaction"},sidebar:"reference",previous:{title:"useTx",permalink:"/frontend/react/hooks/contracts/use-tx"},next:{title:"useWallet",permalink:"/frontend/react/hooks/wallets/use-wallet"}},c={},l=[{value:"Usage",id:"usage",level:2},{value:"Calling with a default caller address",id:"calling-with-a-default-caller-address",level:2},{value:"Return Value",id:"return-value",level:2}],u={toc:l},p="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"usetxpaymentinfo"},"useTxPaymentInfo"),(0,a.kt)("p",null,"A hook for getting the partial fee and weight for a transaction before signing and\nsending. See ",(0,a.kt)("a",{parentName:"p",href:"/frontend/utils/pick#picktxinfo"},"useink/utils helpers")," for compatible\nfunctions that work well with this hook."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useTxPaymentInfo } from 'useink'\n\nexport const MyContractView: React.FC = () => {\n  const contract = useContract('..address', metadata, 'astar')\n  const get = useTxPaymentInfo<boolean>(contract, 'get')\n\n  useEffect(() => {\n    get.send();\n  }, [get.send]);\n\n  return (\n    <button onClick={get.send} disabled={get.isSubmitting}>\n      {get.result?.partialFee ? (\n          `Gas price: ${get.result?.partialFee.toString()}`\n        ) : '--'}\n    </button>\n  )\n}\n")),(0,a.kt)("h2",{id:"calling-with-a-default-caller-address"},"Calling with a default caller address"),(0,a.kt)("p",null,"You must first define a default caller in ",(0,a.kt)("a",{parentName:"p",href:"/frontend/configuration#configprops"},"configuration"),", then call the contract with options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const paymentInfo = useTxPaymentInfo(cRococoContract, 'flip');\nconst args = [];\n\npaymentInfo.send(args, { defaultCaller: true });\n")),(0,a.kt)("h2",{id:"return-value"},"Return Value"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface DispatchInfo {\n  readonly weight: Weight;\n  readonly partialFee: Balance;\n}\n\n// useTxPaymentInfo return type\ninterface PaymentInfoResult {\n  isSubmitting: boolean;\n  result?: DispatchInfo;\n  send: (\n    options?: ContractOptions,\n    params?: unknown[],\n    signerOptions?: Partial<SignerOptions>,\n  ) => Promise<DispatchInfo | undefined>;\n  resolved: boolean;\n}\n")))}f.isMDXComponent=!0}}]);