"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[9411],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),h=a,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},86061:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={title:"Overview",slug:"/cargo-contract-cli"},i=void 0,c={unversionedId:"cargo-contract/overview",id:"version-3.x/cargo-contract/overview",title:"Overview",description:"version",source:"@site/versioned_docs/version-3.x/cargo-contract/overview.md",sourceDirName:"cargo-contract",slug:"/cargo-contract-cli",permalink:"/3.x/cargo-contract-cli",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-3.x/cargo-contract/overview.md",tags:[],version:"3.x",frontMatter:{title:"Overview",slug:"/cargo-contract-cli"},sidebar:"reference",previous:{title:"Overview",permalink:"/3.x/examples"},next:{title:"Overview",permalink:"/3.x/testnet"}},l={},s=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/cargo-contract"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/crates/v/cargo-contract.svg",alt:"version"}))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cargo-contract")," is a CLI tool which helps you set up and manage\nWebAssembly smart contracts written with ink!.\nYou can find it ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/cargo-contract"},"here on GitHub"),"\nand here on ",(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/cargo-contract"},"crates.io"),"."),(0,a.kt)("p",null,"The tool has a number of handy capabilities:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cargo-contract 0.8.0\nUtilities to develop Wasm smart contracts.\n\nUSAGE:\n    cargo contract <SUBCOMMAND>\n\nOPTIONS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nSUBCOMMANDS:\n    new                  Setup and create a new smart contract project\n    build                Compiles the contract, generates metadata, bundles both together in a '.contract' file\n    check                Check that the code builds as Wasm; does not output any build artifact to the top level `target/` directory\n    test                 Test the smart contract off-chain\n    deploy               Upload the smart contract code to the chain\n    instantiate          Instantiate a deployed smart contract\n    help                 Prints this message or the help of the given subcommand(s)\n")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"As a pre-requisite for the tool you need to install the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/WebAssembly/binaryen"},"binaryen")," package, which is used to optimize the WebAssembly bytecode of the contract."),(0,a.kt)("p",null,"Many package managers have it available nowadays \u2012 e.g. it's a package for ",(0,a.kt)("a",{parentName:"p",href:"https://tracker.debian.org/pkg/binaryen"},"Debian/Ubuntu"),",\n",(0,a.kt)("a",{parentName:"p",href:"https://formulae.brew.sh/formula/binaryen"},"Homebrew")," and ",(0,a.kt)("a",{parentName:"p",href:"https://archlinux.org/packages/community/x86_64/binaryen/"},"Arch Linux"),"."),(0,a.kt)("p",null,"After you've installed the package execute:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo install cargo-contract --force --locked\n")),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"--force")," to ensure you are updated to the most recent ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo-contract")," version."),(0,a.kt)("p",null,"You can then use ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo contract --help")," to start exploring the commands made available to you."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"In order to initialize a new ink! project you can use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo contract new flipper\n")),(0,a.kt)("p",null,"This will create a folder ",(0,a.kt)("inlineCode",{parentName:"p"},"flipper")," in your work directory.\nThe folder contains a scaffold ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"lib.rs"),", which both contain the necessary building blocks for using ink!."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"lib.rs")," contains our hello world contract \u2012 the ",(0,a.kt)("inlineCode",{parentName:"p"},"Flipper"),", which we explain in the next section."),(0,a.kt)("p",null,"In order to build the contract just execute these commands in the ",(0,a.kt)("inlineCode",{parentName:"p"},"flipper")," folder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo contract build\n")),(0,a.kt)("p",null,"As a result you'll get the file ",(0,a.kt)("inlineCode",{parentName:"p"},"target/flipper.contract"),". It's a JSON which bundles the contract's\nmetadata and its Wasm blob. This file needs to be used when deploying the contract.\nYou additionally get the individual ",(0,a.kt)("inlineCode",{parentName:"p"},"target/flipper.wasm")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"target/metadata.json")," in the folder as well."))}d.isMDXComponent=!0}}]);