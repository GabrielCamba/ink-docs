"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[389],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},99959:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={title:"Storing Values",slug:"/basics/storing-values",hide_title:!0},o=void 0,s={unversionedId:"basics/storing-values",id:"version-5.x/basics/storing-values",title:"Storing Values",description:"Here is how you store simple values in storage:",source:"@site/versioned_docs/version-5.x/basics/storing-values.md",sourceDirName:"basics",slug:"/basics/storing-values",permalink:"/5.x/basics/storing-values",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-5.x/basics/storing-values.md",tags:[],version:"5.x",frontMatter:{title:"Storing Values",slug:"/basics/storing-values",hide_title:!0},sidebar:"reference",previous:{title:"Contract Template",permalink:"/5.x/basics/contract-template"},next:{title:"Reading Values from Storage",permalink:"/5.x/basics/reading-values"}},c={},l=[{value:"Supported Types",id:"supported-types",level:2},{value:"String, Vector and More",id:"string-vector-and-more",level:3},{value:"Mapping",id:"mapping",level:3},{value:"Substrate Types",id:"substrate-types",level:3},{value:"Enum",id:"enum",level:3},{value:"Struct",id:"struct",level:3},{value:"Initializing Storage in Constructors",id:"initializing-storage-in-constructors",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("img",{src:"/img/title/storage.svg",className:"titlePic"}),(0,a.kt)("h1",{id:"storing-values"},"Storing Values"),(0,a.kt)("p",null,"Here is how you store simple values in storage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\npub struct MyContract {\n    // Store a bool\n    my_bool: bool,\n    // Store some number\n    my_number: u32,\n}\n/* --snip-- */\n")),(0,a.kt)("h2",{id:"supported-types"},"Supported Types"),(0,a.kt)("p",null,"Substrate contracts may store types that are encodable and decodable with\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/parity-codec"},"Parity Codec")," which includes most Rust common data\ntypes such as ",(0,a.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"u{8,16,32,64,128}"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"i{8,16,32,64,128}"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"String"),", tuples, and arrays."),(0,a.kt)("p",null,"Furthermore, ink! provides ",(0,a.kt)("a",{parentName:"p",href:"https://substrate.io/"},"substrate")," specific types like ",(0,a.kt)("inlineCode",{parentName:"p"},"AccountId"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Balance"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"Hash")," to smart contracts as if\nthey were primitive types."),(0,a.kt)("h3",{id:"string-vector-and-more"},"String, Vector and More"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/ink_prelude/latest/ink_prelude/index.html"},(0,a.kt)("inlineCode",{parentName:"a"},"ink_prelude"))," crate provides an efficient approach to import commonly used Rust types such as ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Vec"),", ensuring safe usage within an ink! contract."),(0,a.kt)("p",null,"This simplifies the type referencing process between the ",(0,a.kt)("inlineCode",{parentName:"p"},"std")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"no_std")," environments. Typically, these types are defined within the ",(0,a.kt)("inlineCode",{parentName:"p"},"std")," crate in the ",(0,a.kt)("inlineCode",{parentName:"p"},"std")," environment, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"alloc")," crate in the ",(0,a.kt)("inlineCode",{parentName:"p"},"no_std")," environment. Given that ink! smart contract code is compiled in both environments (",(0,a.kt)("inlineCode",{parentName:"p"},"no_std")," for production and ",(0,a.kt)("inlineCode",{parentName:"p"},"std")," for unit tests), developers might find themselves writing intricate conditional compilation macros. The ",(0,a.kt)("inlineCode",{parentName:"p"},"ink_prelude")," crate conveniently re-exports these types, eliminating this complexity."),(0,a.kt)("p",null,"You can use the prelude definitions like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink::contract]\nmod MyContractWithStringsAndArrays {\n    use ink::prelude::string::String;\n    use ink::prelude::vec::Vec;\n\n    #[ink(storage)]\n    pub struct MyContract {\n        // Store some String\n        my_string: String,\n        // Store some u32 in a vec\n        my_vector: Vec<u32>,\n    }\n    /* --snip-- */\n}\n")),(0,a.kt)("h3",{id:"mapping"},"Mapping"),(0,a.kt)("p",null,"ink! also provides a ",(0,a.kt)("inlineCode",{parentName:"p"},"Mapping")," storage type. You can read more about it ",(0,a.kt)("a",{parentName:"p",href:"/datastructures/mapping"},"here"),"."),(0,a.kt)("h3",{id:"substrate-types"},"Substrate Types"),(0,a.kt)("p",null,"Here is an example of how you would store substrate types ",(0,a.kt)("inlineCode",{parentName:"p"},"AccountId"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Balance")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Hash"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink::contract]\nmod MyContract {\n\n    // Our struct will use those default ink! types\n    #[ink(storage)]\n    pub struct MyContract {\n        // Store some AccountId\n        my_account: AccountId,\n        // Store some Balance\n        my_balance: Balance,\n        // Store some Hash\n        my_hash: Hash,\n    }\n    /* --snip-- */\n}\n")),(0,a.kt)("h3",{id:"enum"},"Enum"),(0,a.kt)("p",null,"Enum can be used as a datatype as well. It's use in the example in the ",(0,a.kt)("a",{parentName:"p",href:"#struct"},"Struct")," section."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum Status {\n    /// An auction has not started yet.\n    NotStarted,\n    /// We are in the starting period of the auction, collecting initial bids.\n    OpeningPeriod,\n    /// We are in the ending period of the auction, where we are taking snapshots\n    /// of the winning bids.\n}\n")),(0,a.kt)("h3",{id:"struct"},"Struct"),(0,a.kt)("p",null,"You can even combine all the above mentioned types in a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"struct")," which you can then store in the contract's storage."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"mod MyContract {\n    use ink::prelude::string::String;\n    use ink::prelude::vec::Vec;\n\n\n    pub struct Auction {\n        /// Branded name of the auction event.\n        name: String,\n        /// Some hash identifying the auction subject.\n        subject: Hash,\n        /// Auction status.\n        status: Status, // Enum: Usage shown in next section\n        /// Candle auction can have no winner.\n        /// If auction is finalized, that means that the winner is determined.\n        finalized: bool,\n        /// vector\n        vector: Vec<u8>,\n    }\n\n    #[ink(storage)]\n    pub struct MyContract {\n        // Store Auctions in a vec\n        auctions: Vec<Auction>,\n    }\n}\n")),(0,a.kt)("p",null,"The values of an enum should be referenced as ",(0,a.kt)("inlineCode",{parentName:"p"},"Status::OpeningPeriod"),"."),(0,a.kt)("h2",{id:"initializing-storage-in-constructors"},"Initializing Storage in Constructors"),(0,a.kt)("p",null,"Constructors are how values get initialized.\nEvery ink! smart contract must have a constructor which is run once when a contract is created. ink! smart contracts can have multiple constructors:"),(0,a.kt)("p",null,"Note that if you have a contract whose storage contains ",(0,a.kt)("inlineCode",{parentName:"p"},"Mapping'"),"s you will need to use\n",(0,a.kt)("inlineCode",{parentName:"p"},"ink_lang::utils::initialize_contract")," in your constructor. See the\n",(0,a.kt)("a",{parentName:"p",href:"/datastructures/mapping"},(0,a.kt)("inlineCode",{parentName:"a"},"Mapping")," documentation")," for more details."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink::contract]\nmod mycontract {\n\n    #[ink(storage)]\n    pub struct MyContract {\n        number: u32,\n    }\n\n    impl MyContract {\n        /// Constructor that initializes the `u32` value to the given `init_value`.\n        #[ink(constructor)]\n        pub fn new(init_value: u32) -> Self {\n            Self {\n                number: init_value,\n            }\n        }\n\n        /// Constructor that initializes the `u32` value to the `u32` default.\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self {\n                number: Default::default(),\n            }\n        }\n    /* --snip-- */\n    }\n}\n")))}d.isMDXComponent=!0}}]);